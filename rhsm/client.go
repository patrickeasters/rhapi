// Package rhsm provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package rhsm

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
)

const (
	BearerScopes = "Bearer.Scopes"
)

// APIPageParam defines model for APIPageParam.
type APIPageParam struct {
	Count  *int `json:"count,omitempty"`
	Limit  *int `json:"limit,omitempty"`
	Offset *int `json:"offset,omitempty"`
}

// AddProviderAccount defines model for AddProviderAccount.
type AddProviderAccount struct {
	Id       *string `json:"id,omitempty"`
	Nickname *string `json:"nickname,omitempty"`
}

// Allocation defines model for Allocation.
type Allocation struct {
	EntitlementQuantity *int    `json:"entitlementQuantity,omitempty"`
	Name                *string `json:"name,omitempty"`
	Type                *string `json:"type,omitempty"`
	Url                 *string `json:"url,omitempty"`
	Uuid                *string `json:"uuid,omitempty"`
	Version             *string `json:"version,omitempty"`
}

// AllocationDetails defines model for AllocationDetails.
type AllocationDetails struct {
	ContentAccessMode *string `json:"contentAccessMode,omitempty"`
	CreatedBy         *string `json:"createdBy,omitempty"`

	// Date represents the date format used for API returns
	CreatedDate *Date `json:"createdDate,omitempty"`

	// EntitlementsAttachedResponse wraps data obtained for EntitlementsAttached and sends metadata about it using helpers.OptionalResult
	EntitlementsAttached         *EntitlementsAttachedResponse `json:"entitlementsAttached,omitempty"`
	EntitlementsAttachedQuantity *int                          `json:"entitlementsAttachedQuantity,omitempty"`

	// Date represents the date format used for API returns
	LastModified *Date   `json:"lastModified,omitempty"`
	Name         *string `json:"name,omitempty"`
	Type         *string `json:"type,omitempty"`
	Uuid         *string `json:"uuid,omitempty"`
	Version      *string `json:"version,omitempty"`
}

// ContentSet defines model for ContentSet.
type ContentSet struct {
	Arch    *string `json:"arch,omitempty"`
	Enabled *bool   `json:"enabled,omitempty"`
	Label   *string `json:"label,omitempty"`
	Name    *string `json:"name,omitempty"`
	Type    *string `json:"type,omitempty"`
}

// Date defines model for Date.
type Date string

// DetailResponse defines model for DetailResponse.
type DetailResponse struct {
	ContractNumber *string `json:"contractNumber,omitempty"`

	// Date represents the date format used for API returns
	EndDate  *Date   `json:"endDate,omitempty"`
	Pools    *[]Pool `json:"pools,omitempty"`
	Quantity *string `json:"quantity,omitempty"`
	Sku      *string `json:"sku,omitempty"`

	// Date represents the date format used for API returns
	StartDate          *Date   `json:"startDate,omitempty"`
	Status             *string `json:"status,omitempty"`
	SubscriptionName   *string `json:"subscriptionName,omitempty"`
	SubscriptionNumber *string `json:"subscriptionNumber,omitempty"`
}

// DownloadLink defines model for DownloadLink.
type DownloadLink struct {

	// time at which the download link expires (in UTC)
	Expiration *string `json:"expiration,omitempty"`

	// filename of the file on the download link
	Filename *string `json:"filename,omitempty"`

	// URL to obtain the image
	Href *string `json:"href,omitempty"`
}

// EnabledCloudAccessProvider defines model for EnabledCloudAccessProvider.
type EnabledCloudAccessProvider struct {
	Accounts  *[]EnabledProviderAccount `json:"accounts,omitempty"`
	Name      *string                   `json:"name,omitempty"`
	Products  *[]EnabledProduct         `json:"products,omitempty"`
	ShortName *string                   `json:"shortName,omitempty"`
}

// EnabledProduct defines model for EnabledProduct.
type EnabledProduct struct {
	EnabledQuantity *int      `json:"enabledQuantity,omitempty"`
	ImageGroups     *[]string `json:"imageGroups,omitempty"`
	Name            *string   `json:"name,omitempty"`

	// ShortDate represents the short date format used for API returns where time precision is not needed
	NextRenewal   *ShortDate `json:"nextRenewal,omitempty"`
	Sku           *string    `json:"sku,omitempty"`
	TotalQuantity *int       `json:"totalQuantity,omitempty"`
}

// EnabledProviderAccount defines model for EnabledProviderAccount.
type EnabledProviderAccount struct {

	// Date represents the date format used for API returns
	DateAdded       Date               `json:"dateAdded"`
	GoldImageStatus *[]GoldImageStatus `json:"goldImageStatus,omitempty"`
	Id              string             `json:"id"`
	Nickname        string             `json:"nickname"`

	// verification status for RHSM Auto Registration (only displayed for supported cloud providers)
	Verified *bool `json:"verified,omitempty"`
}

// EntitlementsAttachedResponse defines model for EntitlementsAttachedResponse.
type EntitlementsAttachedResponse struct {
	Reason *string                              `json:"reason,omitempty"`
	Valid  *bool                                `json:"valid,omitempty"`
	Value  *[]EntitlementsAttachedResponseValue `json:"value,omitempty"`
}

// EntitlementsAttachedResponseValue defines model for EntitlementsAttachedResponseValue.
type EntitlementsAttachedResponseValue struct {
	ContractNumber      *string `json:"contractNumber,omitempty"`
	EntitlementQuantity *int    `json:"entitlementQuantity,omitempty"`
	Id                  *string `json:"id,omitempty"`
	Sku                 *string `json:"sku,omitempty"`
}

// ErrataCount defines model for ErrataCount.
type ErrataCount struct {
	BugfixCount      *int `json:"bugfixCount,omitempty"`
	EnhancementCount *int `json:"enhancementCount,omitempty"`
	SecurityCount    *int `json:"securityCount,omitempty"`
}

// ErratumDetails defines model for ErratumDetails.
type ErratumDetails struct {
	AffectedProducts *[]string    `json:"affectedProducts,omitempty"`
	Bugzillas        *[]Reference `json:"bugzillas,omitempty"`
	CopyrightYear    *string      `json:"copyrightYear,omitempty"`
	Cves             *string      `json:"cves,omitempty"`
	Description      *string      `json:"description,omitempty"`
	Id               *string      `json:"id,omitempty"`

	// Date represents the date format used for API returns
	Issued *Date `json:"issued,omitempty"`

	// Date represents the date format used for API returns
	LastUpdated  *Date        `json:"lastUpdated,omitempty"`
	References   *[]Reference `json:"references,omitempty"`
	Severity     *string      `json:"severity,omitempty"`
	Solution     *string      `json:"solution,omitempty"`
	Summary      *string      `json:"summary,omitempty"`
	Synopsis     *string      `json:"synopsis,omitempty"`
	Type         *string      `json:"type,omitempty"`
	TypeSeverity *string      `json:"typeSeverity,omitempty"`
}

// ErratumForSystem defines model for ErratumForSystem.
type ErratumForSystem struct {
	Href *string `json:"href,omitempty"`
	Id   *string `json:"id,omitempty"`

	// Date represents the date format used for API returns
	Published *Date   `json:"published,omitempty"`
	Severity  *string `json:"severity,omitempty"`
	Synopsis  *string `json:"synopsis,omitempty"`
	Type      *string `json:"type,omitempty"`
}

// ErratumInContentSet defines model for ErratumInContentSet.
type ErratumInContentSet struct {
	AdvisoryId *string `json:"advisoryId,omitempty"`
	Href       *string `json:"href,omitempty"`

	// Date represents the date format used for API returns
	PublishDate *Date   `json:"publishDate,omitempty"`
	Severity    *string `json:"severity,omitempty"`
	Synopsis    *string `json:"synopsis,omitempty"`
	Type        *string `json:"type,omitempty"`
}

// ErrorDetails defines model for ErrorDetails.
type ErrorDetails struct {
	Code    *int    `json:"code,omitempty"`
	Message *string `json:"message,omitempty"`
}

// GoldImageStatus defines model for GoldImageStatus.
type GoldImageStatus struct {

	// Description of the provider image group
	Description *string `json:"description,omitempty"`

	// Name of the requested provider image group
	Name *string `json:"name,omitempty"`

	// Status of Gold Image Request
	Status *string `json:"status,omitempty"`
}

// ImageInContentSet defines model for ImageInContentSet.
type ImageInContentSet struct {
	Arch     *string `json:"arch,omitempty"`
	Checksum *string `json:"checksum,omitempty"`

	// Date represents the date format used for API returns
	DatePublished *Date   `json:"datePublished,omitempty"`
	DownloadHref  *string `json:"downloadHref,omitempty"`
	Filename      *string `json:"filename,omitempty"`
	ImageName     *string `json:"imageName,omitempty"`
}

// ListResponse defines model for ListResponse.
type ListResponse []DetailResponse

// MyErratum defines model for MyErratum.
type MyErratum struct {
	AdvisoryId          *string `json:"advisoryId,omitempty"`
	AffectedSystemCount *int    `json:"affectedSystemCount,omitempty"`
	Details             *string `json:"details,omitempty"`

	// Date represents the date format used for API returns
	PublishDate *Date   `json:"publishDate,omitempty"`
	Synopsis    *string `json:"synopsis,omitempty"`
	Systems     *string `json:"systems,omitempty"`
	Type        *string `json:"type,omitempty"`
}

// PackageDetail defines model for PackageDetail.
type PackageDetail struct {
	Arch        *string   `json:"arch,omitempty"`
	Checksum    *string   `json:"checksum,omitempty"`
	ContentSets *[]string `json:"contentSets,omitempty"`
	DetailsUrl  *string   `json:"details_url,omitempty"`
	Epoch       *int      `json:"epoch,omitempty"`
	Filename    *string   `json:"filename,omitempty"`
	Name        *string   `json:"name,omitempty"`
	Release     *string   `json:"release,omitempty"`
	RepoTags    *[]string `json:"repoTags,omitempty"`
	Summary     *string   `json:"summary,omitempty"`
	Version     *string   `json:"version,omitempty"`
}

// PackageForSystem defines model for PackageForSystem.
type PackageForSystem struct {
	Advisories *[]struct {
		Advisory *string `json:"advisory,omitempty"`
		Url      *string `json:"url,omitempty"`
	} `json:"advisories,omitempty"`
	Arch        *string `json:"arch,omitempty"`
	Epoch       *int    `json:"epoch,omitempty"`
	ErrataCount *int    `json:"errataCount,omitempty"`
	Name        *string `json:"name,omitempty"`
	Release     *string `json:"release,omitempty"`
	Version     *string `json:"version,omitempty"`
}

// Pool defines model for Pool.
type Pool struct {
	Consumed *int    `json:"consumed,omitempty"`
	Id       *string `json:"id,omitempty"`
	Quantity *int    `json:"quantity,omitempty"`
	Type     *string `json:"type,omitempty"`
}

// PoolDetail defines model for PoolDetail.
type PoolDetail struct {
	ContractNumber *string `json:"contractNumber,omitempty"`

	// Date represents the date format used for API returns
	EndDate               *Date   `json:"endDate,omitempty"`
	EntitlementsAvailable *int    `json:"entitlementsAvailable,omitempty"`
	Id                    *string `json:"id,omitempty"`
	ServiceLevel          *string `json:"serviceLevel,omitempty"`
	Sku                   *string `json:"sku,omitempty"`

	// Date represents the date format used for API returns
	StartDate          *Date   `json:"startDate,omitempty"`
	SubscriptionName   *string `json:"subscriptionName,omitempty"`
	SubscriptionNumber *string `json:"subscriptionNumber,omitempty"`
}

// Reference defines model for Reference.
type Reference struct {
	Href  *string `json:"href,omitempty"`
	Id    *string `json:"id,omitempty"`
	Title *string `json:"title,omitempty"`
	Type  *string `json:"type,omitempty"`
}

// ShortDate defines model for ShortDate.
type ShortDate string

// System defines model for System.
type System struct {
	EntitlementCount  *int    `json:"entitlementCount,omitempty"`
	EntitlementStatus *string `json:"entitlementStatus,omitempty"`

	// ErrataCount is the errata information for a System
	ErrataCounts *ErrataCount `json:"errataCounts,omitempty"`
	Hostname     *string      `json:"hostname,omitempty"`
	Href         *string      `json:"href,omitempty"`

	// Date represents the date format used for API returns
	LastCheckin *Date   `json:"lastCheckin,omitempty"`
	Name        *string `json:"name,omitempty"`
	Type        *string `json:"type,omitempty"`
	Username    *string `json:"username,omitempty"`
	Uuid        *string `json:"uuid,omitempty"`
}

// SystemListSystem defines model for SystemList.
type SystemListSystem struct {
	ComplianceStatus    *string `json:"complianceStatus,omitempty"`
	Details             *string `json:"details,omitempty"`
	EntitlementQuantity *int    `json:"entitlementQuantity,omitempty"`

	// Date represents the date format used for API returns
	LastCheckin              *Date   `json:"lastCheckin,omitempty"`
	SystemName               *string `json:"systemName,omitempty"`
	TotalEntitlementQuantity *int    `json:"totalEntitlementQuantity,omitempty"`
	Type                     *string `json:"type,omitempty"`
	Uuid                     *string `json:"uuid,omitempty"`
}

// ContentSetArchMock defines model for contentSetArchMock.
type ContentSetArchMock struct {
	Body *[]ErratumInContentSet `json:"body,omitempty"`

	// APIPageParam details the pagination parameters in APIResponse
	Pagination *APIPageParam `json:"pagination,omitempty"`
}

// ExportJobResponse defines model for exportJobResponse.
type ExportJobResponse struct {
	ExportID *string `json:"exportID,omitempty"`
	Href     *string `json:"href,omitempty"`
}

// ExportResponse defines model for exportResponse.
type ExportResponse struct {
	ExportJobID *string `json:"exportJobID,omitempty"`
	Href        *string `json:"href,omitempty"`
}

// MyErrataListMock defines model for myErrataListMock.
type MyErrataListMock struct {
	Body *[]MyErratum `json:"body,omitempty"`

	// APIPageParam details the pagination parameters in APIResponse
	Pagination *APIPageParam `json:"pagination,omitempty"`
}

// OngoingExportJobResponse defines model for ongoingExportJobResponse.
type OngoingExportJobResponse struct {
	Message *string `json:"message,omitempty"`
}

// PkgContentSetArch defines model for pkgContentSetArch.
type PkgContentSetArch struct {
	Arch *string `json:"arch,omitempty"`

	// Date represents the date format used for API returns
	BuildDate    *Date     `json:"buildDate,omitempty"`
	BuildHost    *string   `json:"buildHost,omitempty"`
	Checksum     *string   `json:"checksum,omitempty"`
	ContentSets  *[]string `json:"contentSets,omitempty"`
	Description  *string   `json:"description,omitempty"`
	DownloadHref *string   `json:"downloadHref,omitempty"`
	Epoch        *string   `json:"epoch,omitempty"`
	Group        *string   `json:"group,omitempty"`
	Href         *string   `json:"href,omitempty"`
	License      *string   `json:"license,omitempty"`
	Name         *string   `json:"name,omitempty"`
	Release      *string   `json:"release,omitempty"`
	Size         *int      `json:"size,omitempty"`
	Summary      *string   `json:"summary,omitempty"`
	Version      *string   `json:"version,omitempty"`
}

// PkgDetails defines model for pkgDetails.
type PkgDetails struct {
	Arch *string `json:"arch,omitempty"`

	// Date represents the date format used for API returns
	BuildDate   *Date     `json:"buildDate,omitempty"`
	BuildHost   *string   `json:"buildHost,omitempty"`
	Checksum    *string   `json:"checksum,omitempty"`
	ContentSets *[]string `json:"contentSets,omitempty"`
	Description *string   `json:"description,omitempty"`
	Epoch       *string   `json:"epoch,omitempty"`
	Group       *string   `json:"group,omitempty"`
	Href        *string   `json:"href,omitempty"`
	License     *string   `json:"license,omitempty"`
	Name        *string   `json:"name,omitempty"`
	Release     *string   `json:"release,omitempty"`
	Size        *int      `json:"size,omitempty"`
	Summary     *string   `json:"summary,omitempty"`
	Version     *string   `json:"version,omitempty"`
}

// PkgListMock defines model for pkgListMock.
type PkgListMock struct {
	Body *[]PackageDetail `json:"body,omitempty"`

	// APIPageParam details the pagination parameters in APIResponse
	Pagination *APIPageParam `json:"pagination,omitempty"`
}

// PoolsListMock defines model for poolsListMock.
type PoolsListMock struct {
	Body *[]PoolDetail `json:"body,omitempty"`

	// APIPageParam details the pagination parameters in APIResponse
	Pagination *APIPageParam `json:"pagination,omitempty"`
}

// SystemList defines model for systemList.
type SystemList []System

// SystemListMock defines model for systemListMock.
type SystemListMock struct {
	Body *[]System `json:"body,omitempty"`

	// APIPageParam details the pagination parameters in APIResponse
	Pagination *APIPageParam `json:"pagination,omitempty"`
}

// ListAllocationsParams defines parameters for ListAllocations.
type ListAllocationsParams struct {

	// max number of results you want
	Limit *int `json:"limit,omitempty"`

	// index from which you want next items
	Offset *int `json:"offset,omitempty"`
}

// CreateSatelliteParams defines parameters for CreateSatellite.
type CreateSatelliteParams struct {

	// must be less than 100 characters and use only numbers, letters, underscores, hyphens, and periods
	Name string `json:"Name"`
}

// RemoveAllocationParams defines parameters for RemoveAllocation.
type RemoveAllocationParams struct {

	// Deleting a subscription allocation can have significant impacts on your hosts and activation keys.
	// We require a force parameter to make sure the delete operation is intentional.
	Force bool `json:"force"`
}

// ShowAllocationParams defines parameters for ShowAllocation.
type ShowAllocationParams struct {

	// Show more details about a allocation
	Include *string `json:"include,omitempty"`
}

// AttachEntitlementAllocationParams defines parameters for AttachEntitlementAllocation.
type AttachEntitlementAllocationParams struct {
	Pool string `json:"pool"`

	// quantity you want to attach
	Quantity *int `json:"quantity,omitempty"`
}

// UpdateEntitlementAllocationParams defines parameters for UpdateEntitlementAllocation.
type UpdateEntitlementAllocationParams struct {

	// maxItem: quantity must be less than or equal to the maximum number of allowed entitlements in the entitlement pool
	// minItem: 1
	Quantity *int `json:"quantity,omitempty"`
}

// ListAllocationPoolsParams defines parameters for ListAllocationPools.
type ListAllocationPoolsParams struct {

	// max number of results you want
	Limit *int `json:"limit,omitempty"`

	// index from which you want next items
	Offset *int `json:"offset,omitempty"`

	// include future dated pools for satellite 6.3 or higher
	Future *bool `json:"future,omitempty"`
}

// UpdateProviderAccountJSONBody defines parameters for UpdateProviderAccount.
type UpdateProviderAccountJSONBody struct {
	Id          string  `json:"id"`
	NewID       *string `json:"newID,omitempty"`
	NewNickname *string `json:"newNickname,omitempty"`
}

// RemoveProviderAccountJSONBody defines parameters for RemoveProviderAccount.
type RemoveProviderAccountJSONBody struct {
	Id string `json:"id"`
}

// AddProviderAccountsJSONBody defines parameters for AddProviderAccounts.
type AddProviderAccountsJSONBody []AddProviderAccount

// VerifyProviderAccountJSONBody defines parameters for VerifyProviderAccount.
type VerifyProviderAccountJSONBody struct {

	// base64-encoded cloud instance metadata
	Identity string `json:"identity"`

	// base64-encoded cloud instance metadata signature
	Signature string `json:"signature"`
}

// EnableGoldImagesJSONBody defines parameters for EnableGoldImages.
type EnableGoldImagesJSONBody struct {
	Accounts []string `json:"accounts"`
	Images   []string `json:"images"`
}

// ListErrataParams defines parameters for ListErrata.
type ListErrataParams struct {

	// max number of results you want
	Limit *int `json:"limit,omitempty"`

	// index from which you want next items
	Offset *int `json:"offset,omitempty"`
}

// ListErrataByContentSetArchParams defines parameters for ListErrataByContentSetArch.
type ListErrataByContentSetArchParams struct {

	// max number of results you want
	Limit *int `json:"limit,omitempty"`

	// index from which you want next items
	Offset *int `json:"offset,omitempty"`
}

// ListErratumPackagesParams defines parameters for ListErratumPackages.
type ListErratumPackagesParams struct {

	// max number of results you want
	Limit *int `json:"limit,omitempty"`

	// index from which you want next items
	Offset *int `json:"offset,omitempty"`
}

// ListErratumSystemsParams defines parameters for ListErratumSystems.
type ListErratumSystemsParams struct {

	// max number of results you want
	Limit *int `json:"limit,omitempty"`

	// index from which you want next items
	Offset *int `json:"offset,omitempty"`
}

// ListImagesByContentSetParams defines parameters for ListImagesByContentSet.
type ListImagesByContentSetParams struct {

	// maximum number of list items in a page
	Limit *int `json:"limit,omitempty"`

	// index from which you want next items
	Offset *int `json:"offset,omitempty"`
}

// ListPackagesByContentSetArchParams defines parameters for ListPackagesByContentSetArch.
type ListPackagesByContentSetArchParams struct {

	// max number of results you want
	Limit *int `json:"limit,omitempty"`

	// index from which you want next items
	Offset *int      `json:"offset,omitempty"`
	Filter *[]string `json:"filter,omitempty"`
}

// ListSubscriptionsParams defines parameters for ListSubscriptions.
type ListSubscriptionsParams struct {

	// max number of results you want
	Limit *int `json:"limit,omitempty"`

	// index from which you want next items
	Offset *int `json:"offset,omitempty"`
}

// ListSubContentSetsParams defines parameters for ListSubContentSets.
type ListSubContentSetsParams struct {

	// max number of results you want
	Limit *int `json:"limit,omitempty"`

	// index from which you want next items
	Offset *int `json:"offset,omitempty"`
}

// ListSubSystemsParams defines parameters for ListSubSystems.
type ListSubSystemsParams struct {

	// max number of results you want
	Limit *int `json:"limit,omitempty"`

	// index from which you want next items
	Offset *int `json:"offset,omitempty"`
}

// ListSystemsParams defines parameters for ListSystems.
type ListSystemsParams struct {

	// max number of results you want
	Limit *int `json:"limit,omitempty"`

	// index from which you want next items
	Offset *int `json:"offset,omitempty"`

	// Filter Systems by System Name
	Filter *string `json:"filter,omitempty"`

	// Filter Systems by a valid User Name, where User Name is the system owner and wildcard characters are not allowed
	Username *string `json:"username,omitempty"`
}

// ShowSystemParams defines parameters for ShowSystem.
type ShowSystemParams struct {

	// Show more details about a system
	Include *[]string `json:"include,omitempty"`
}

// AttachEntitlementParams defines parameters for AttachEntitlement.
type AttachEntitlementParams struct {
	Pool string `json:"pool"`

	// quantity you want to attach
	Quantity *int `json:"quantity,omitempty"`
}

// ListSystemErrataParams defines parameters for ListSystemErrata.
type ListSystemErrataParams struct {

	// max number of results you want
	Limit *int `json:"limit,omitempty"`

	// index from which you want next items
	Offset *int `json:"offset,omitempty"`
}

// ListSystemPackagesParams defines parameters for ListSystemPackages.
type ListSystemPackagesParams struct {

	// max number of results you want
	Limit *int `json:"limit,omitempty"`

	// index from which you want next items
	Offset *int `json:"offset,omitempty"`

	// Show errata details for packages
	ErrataDetail *bool `json:"errata_detail,omitempty"`

	// Show upgradable packages only. Also accepts 'upgradable' as valid query.
	Upgradeable *bool `json:"upgradeable,omitempty"`

	// Filter packages
	Filter *string `json:"filter,omitempty"`
}

// ListSystemPoolsParams defines parameters for ListSystemPools.
type ListSystemPoolsParams struct {

	// max number of results you want
	Limit *int `json:"limit,omitempty"`

	// index from which you want next items
	Offset *int `json:"offset,omitempty"`
}

// UpdateProviderAccountJSONRequestBody defines body for UpdateProviderAccount for application/json ContentType.
type UpdateProviderAccountJSONRequestBody UpdateProviderAccountJSONBody

// RemoveProviderAccountJSONRequestBody defines body for RemoveProviderAccount for application/json ContentType.
type RemoveProviderAccountJSONRequestBody RemoveProviderAccountJSONBody

// AddProviderAccountsJSONRequestBody defines body for AddProviderAccounts for application/json ContentType.
type AddProviderAccountsJSONRequestBody AddProviderAccountsJSONBody

// VerifyProviderAccountJSONRequestBody defines body for VerifyProviderAccount for application/json ContentType.
type VerifyProviderAccountJSONRequestBody VerifyProviderAccountJSONBody

// EnableGoldImagesJSONRequestBody defines body for EnableGoldImages for application/json ContentType.
type EnableGoldImagesJSONRequestBody EnableGoldImagesJSONBody

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = http.DefaultClient
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// ListAllocations request
	ListAllocations(ctx context.Context, params *ListAllocationsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateSatellite request
	CreateSatellite(ctx context.Context, params *CreateSatelliteParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RemoveAllocation request
	RemoveAllocation(ctx context.Context, allocationUUID string, params *RemoveAllocationParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ShowAllocation request
	ShowAllocation(ctx context.Context, allocationUUID string, params *ShowAllocationParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AttachEntitlementAllocation request
	AttachEntitlementAllocation(ctx context.Context, allocationUUID string, params *AttachEntitlementAllocationParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateEntitlementAllocation request
	UpdateEntitlementAllocation(ctx context.Context, allocationUUID string, entitlementUUID string, params *UpdateEntitlementAllocationParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ExportAllocation request
	ExportAllocation(ctx context.Context, allocationUUID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetExportAllocation request
	GetExportAllocation(ctx context.Context, allocationUUID string, exportID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ExportJobAllocation request
	ExportJobAllocation(ctx context.Context, allocationUUID string, exportJobID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListAllocationPools request
	ListAllocationPools(ctx context.Context, allocationUUID string, params *ListAllocationPoolsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RemoveAllocationEntitlement request
	RemoveAllocationEntitlement(ctx context.Context, allocationUUID string, entitlementID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListEnabledCloudAccessProviders request
	ListEnabledCloudAccessProviders(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateProviderAccount request  with any body
	UpdateProviderAccountWithBody(ctx context.Context, providerShortName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateProviderAccount(ctx context.Context, providerShortName string, body UpdateProviderAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RemoveProviderAccount request  with any body
	RemoveProviderAccountWithBody(ctx context.Context, providerShortName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	RemoveProviderAccount(ctx context.Context, providerShortName string, body RemoveProviderAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AddProviderAccounts request  with any body
	AddProviderAccountsWithBody(ctx context.Context, providerShortName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AddProviderAccounts(ctx context.Context, providerShortName string, body AddProviderAccountsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// VerifyProviderAccount request  with any body
	VerifyProviderAccountWithBody(ctx context.Context, providerShortName string, accountID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	VerifyProviderAccount(ctx context.Context, providerShortName string, accountID string, body VerifyProviderAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EnableGoldImages request  with any body
	EnableGoldImagesWithBody(ctx context.Context, providerShortName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	EnableGoldImages(ctx context.Context, providerShortName string, body EnableGoldImagesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListErrata request
	ListErrata(ctx context.Context, params *ListErrataParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListErrataByContentSetArch request
	ListErrataByContentSetArch(ctx context.Context, contentSet string, arch string, params *ListErrataByContentSetArchParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ShowErratum request
	ShowErratum(ctx context.Context, advisoryID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListErratumPackages request
	ListErratumPackages(ctx context.Context, advisoryID string, params *ListErratumPackagesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListErratumSystems request
	ListErratumSystems(ctx context.Context, advisoryID string, params *ListErratumSystemsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListImagesByContentSet request
	ListImagesByContentSet(ctx context.Context, contentSet string, params *ListImagesByContentSetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DownloadImage request
	DownloadImage(ctx context.Context, checksum string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListPackagesByContentSetArch request
	ListPackagesByContentSetArch(ctx context.Context, contentSet string, arch string, params *ListPackagesByContentSetArchParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ShowPackage request
	ShowPackage(ctx context.Context, checksum string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DownloadPackage request
	DownloadPackage(ctx context.Context, checksum string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListSubscriptions request
	ListSubscriptions(ctx context.Context, params *ListSubscriptionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListSubContentSets request
	ListSubContentSets(ctx context.Context, subscriptionNumber string, params *ListSubContentSetsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListSubSystems request
	ListSubSystems(ctx context.Context, subscriptionNumber string, params *ListSubSystemsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListSystems request
	ListSystems(ctx context.Context, params *ListSystemsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RemoveSystem request
	RemoveSystem(ctx context.Context, systemUUID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ShowSystem request
	ShowSystem(ctx context.Context, systemUUID string, params *ShowSystemParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AttachEntitlement request
	AttachEntitlement(ctx context.Context, systemUUID string, params *AttachEntitlementParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListSystemErrata request
	ListSystemErrata(ctx context.Context, systemUUID string, params *ListSystemErrataParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListSystemPackages request
	ListSystemPackages(ctx context.Context, systemUUID string, params *ListSystemPackagesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListSystemPools request
	ListSystemPools(ctx context.Context, systemUUID string, params *ListSystemPoolsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RemoveSystemEntitlement request
	RemoveSystemEntitlement(ctx context.Context, systemUUID string, entitlementID string, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) ListAllocations(ctx context.Context, params *ListAllocationsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListAllocationsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateSatellite(ctx context.Context, params *CreateSatelliteParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateSatelliteRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RemoveAllocation(ctx context.Context, allocationUUID string, params *RemoveAllocationParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRemoveAllocationRequest(c.Server, allocationUUID, params)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ShowAllocation(ctx context.Context, allocationUUID string, params *ShowAllocationParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewShowAllocationRequest(c.Server, allocationUUID, params)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AttachEntitlementAllocation(ctx context.Context, allocationUUID string, params *AttachEntitlementAllocationParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAttachEntitlementAllocationRequest(c.Server, allocationUUID, params)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateEntitlementAllocation(ctx context.Context, allocationUUID string, entitlementUUID string, params *UpdateEntitlementAllocationParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateEntitlementAllocationRequest(c.Server, allocationUUID, entitlementUUID, params)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExportAllocation(ctx context.Context, allocationUUID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExportAllocationRequest(c.Server, allocationUUID)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetExportAllocation(ctx context.Context, allocationUUID string, exportID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetExportAllocationRequest(c.Server, allocationUUID, exportID)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExportJobAllocation(ctx context.Context, allocationUUID string, exportJobID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExportJobAllocationRequest(c.Server, allocationUUID, exportJobID)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListAllocationPools(ctx context.Context, allocationUUID string, params *ListAllocationPoolsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListAllocationPoolsRequest(c.Server, allocationUUID, params)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RemoveAllocationEntitlement(ctx context.Context, allocationUUID string, entitlementID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRemoveAllocationEntitlementRequest(c.Server, allocationUUID, entitlementID)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListEnabledCloudAccessProviders(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListEnabledCloudAccessProvidersRequest(c.Server)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateProviderAccountWithBody(ctx context.Context, providerShortName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateProviderAccountRequestWithBody(c.Server, providerShortName, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateProviderAccount(ctx context.Context, providerShortName string, body UpdateProviderAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateProviderAccountRequest(c.Server, providerShortName, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RemoveProviderAccountWithBody(ctx context.Context, providerShortName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRemoveProviderAccountRequestWithBody(c.Server, providerShortName, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RemoveProviderAccount(ctx context.Context, providerShortName string, body RemoveProviderAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRemoveProviderAccountRequest(c.Server, providerShortName, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddProviderAccountsWithBody(ctx context.Context, providerShortName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddProviderAccountsRequestWithBody(c.Server, providerShortName, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddProviderAccounts(ctx context.Context, providerShortName string, body AddProviderAccountsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddProviderAccountsRequest(c.Server, providerShortName, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) VerifyProviderAccountWithBody(ctx context.Context, providerShortName string, accountID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewVerifyProviderAccountRequestWithBody(c.Server, providerShortName, accountID, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) VerifyProviderAccount(ctx context.Context, providerShortName string, accountID string, body VerifyProviderAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewVerifyProviderAccountRequest(c.Server, providerShortName, accountID, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EnableGoldImagesWithBody(ctx context.Context, providerShortName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEnableGoldImagesRequestWithBody(c.Server, providerShortName, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EnableGoldImages(ctx context.Context, providerShortName string, body EnableGoldImagesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEnableGoldImagesRequest(c.Server, providerShortName, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListErrata(ctx context.Context, params *ListErrataParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListErrataRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListErrataByContentSetArch(ctx context.Context, contentSet string, arch string, params *ListErrataByContentSetArchParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListErrataByContentSetArchRequest(c.Server, contentSet, arch, params)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ShowErratum(ctx context.Context, advisoryID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewShowErratumRequest(c.Server, advisoryID)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListErratumPackages(ctx context.Context, advisoryID string, params *ListErratumPackagesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListErratumPackagesRequest(c.Server, advisoryID, params)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListErratumSystems(ctx context.Context, advisoryID string, params *ListErratumSystemsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListErratumSystemsRequest(c.Server, advisoryID, params)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListImagesByContentSet(ctx context.Context, contentSet string, params *ListImagesByContentSetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListImagesByContentSetRequest(c.Server, contentSet, params)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DownloadImage(ctx context.Context, checksum string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDownloadImageRequest(c.Server, checksum)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListPackagesByContentSetArch(ctx context.Context, contentSet string, arch string, params *ListPackagesByContentSetArchParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListPackagesByContentSetArchRequest(c.Server, contentSet, arch, params)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ShowPackage(ctx context.Context, checksum string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewShowPackageRequest(c.Server, checksum)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DownloadPackage(ctx context.Context, checksum string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDownloadPackageRequest(c.Server, checksum)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListSubscriptions(ctx context.Context, params *ListSubscriptionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListSubscriptionsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListSubContentSets(ctx context.Context, subscriptionNumber string, params *ListSubContentSetsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListSubContentSetsRequest(c.Server, subscriptionNumber, params)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListSubSystems(ctx context.Context, subscriptionNumber string, params *ListSubSystemsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListSubSystemsRequest(c.Server, subscriptionNumber, params)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListSystems(ctx context.Context, params *ListSystemsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListSystemsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RemoveSystem(ctx context.Context, systemUUID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRemoveSystemRequest(c.Server, systemUUID)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ShowSystem(ctx context.Context, systemUUID string, params *ShowSystemParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewShowSystemRequest(c.Server, systemUUID, params)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AttachEntitlement(ctx context.Context, systemUUID string, params *AttachEntitlementParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAttachEntitlementRequest(c.Server, systemUUID, params)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListSystemErrata(ctx context.Context, systemUUID string, params *ListSystemErrataParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListSystemErrataRequest(c.Server, systemUUID, params)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListSystemPackages(ctx context.Context, systemUUID string, params *ListSystemPackagesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListSystemPackagesRequest(c.Server, systemUUID, params)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListSystemPools(ctx context.Context, systemUUID string, params *ListSystemPoolsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListSystemPoolsRequest(c.Server, systemUUID, params)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RemoveSystemEntitlement(ctx context.Context, systemUUID string, entitlementID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRemoveSystemEntitlementRequest(c.Server, systemUUID, entitlementID)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewListAllocationsRequest generates requests for ListAllocations
func NewListAllocationsRequest(server string, params *ListAllocationsParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/allocations")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "offset", *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateSatelliteRequest generates requests for CreateSatellite
func NewCreateSatelliteRequest(server string, params *CreateSatelliteParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/allocations")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if queryFrag, err := runtime.StyleParam("form", true, "Name", params.Name); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("POST", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRemoveAllocationRequest generates requests for RemoveAllocation
func NewRemoveAllocationRequest(server string, allocationUUID string, params *RemoveAllocationParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "AllocationUUID", allocationUUID)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/allocations/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if queryFrag, err := runtime.StyleParam("form", true, "force", params.Force); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("DELETE", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewShowAllocationRequest generates requests for ShowAllocation
func NewShowAllocationRequest(server string, allocationUUID string, params *ShowAllocationParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "AllocationUUID", allocationUUID)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/allocations/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Include != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "include", *params.Include); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAttachEntitlementAllocationRequest generates requests for AttachEntitlementAllocation
func NewAttachEntitlementAllocationRequest(server string, allocationUUID string, params *AttachEntitlementAllocationParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "AllocationUUID", allocationUUID)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/allocations/%s/entitlements", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if queryFrag, err := runtime.StyleParam("form", true, "pool", params.Pool); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if params.Quantity != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "quantity", *params.Quantity); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("POST", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateEntitlementAllocationRequest generates requests for UpdateEntitlementAllocation
func NewUpdateEntitlementAllocationRequest(server string, allocationUUID string, entitlementUUID string, params *UpdateEntitlementAllocationParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "AllocationUUID", allocationUUID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParam("simple", false, "EntitlementUUID", entitlementUUID)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/allocations/%s/entitlements/%s", pathParam0, pathParam1)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Quantity != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "quantity", *params.Quantity); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("PUT", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewExportAllocationRequest generates requests for ExportAllocation
func NewExportAllocationRequest(server string, allocationUUID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "AllocationUUID", allocationUUID)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/allocations/%s/export", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetExportAllocationRequest generates requests for GetExportAllocation
func NewGetExportAllocationRequest(server string, allocationUUID string, exportID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "AllocationUUID", allocationUUID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParam("simple", false, "ExportID", exportID)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/allocations/%s/export/%s", pathParam0, pathParam1)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewExportJobAllocationRequest generates requests for ExportJobAllocation
func NewExportJobAllocationRequest(server string, allocationUUID string, exportJobID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "AllocationUUID", allocationUUID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParam("simple", false, "ExportJobID", exportJobID)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/allocations/%s/exportJob/%s", pathParam0, pathParam1)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListAllocationPoolsRequest generates requests for ListAllocationPools
func NewListAllocationPoolsRequest(server string, allocationUUID string, params *ListAllocationPoolsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "AllocationUUID", allocationUUID)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/allocations/%s/pools", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "offset", *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Future != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "future", *params.Future); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRemoveAllocationEntitlementRequest generates requests for RemoveAllocationEntitlement
func NewRemoveAllocationEntitlementRequest(server string, allocationUUID string, entitlementID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "AllocationUUID", allocationUUID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParam("simple", false, "EntitlementID", entitlementID)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/allocations/%s/%s", pathParam0, pathParam1)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListEnabledCloudAccessProvidersRequest generates requests for ListEnabledCloudAccessProviders
func NewListEnabledCloudAccessProvidersRequest(server string) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/cloud_access_providers/enabled")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateProviderAccountRequest calls the generic UpdateProviderAccount builder with application/json body
func NewUpdateProviderAccountRequest(server string, providerShortName string, body UpdateProviderAccountJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateProviderAccountRequestWithBody(server, providerShortName, "application/json", bodyReader)
}

// NewUpdateProviderAccountRequestWithBody generates requests for UpdateProviderAccount with any type of body
func NewUpdateProviderAccountRequestWithBody(server string, providerShortName string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "ProviderShortName", providerShortName)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/cloud_access_providers/%s/account", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRemoveProviderAccountRequest calls the generic RemoveProviderAccount builder with application/json body
func NewRemoveProviderAccountRequest(server string, providerShortName string, body RemoveProviderAccountJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRemoveProviderAccountRequestWithBody(server, providerShortName, "application/json", bodyReader)
}

// NewRemoveProviderAccountRequestWithBody generates requests for RemoveProviderAccount with any type of body
func NewRemoveProviderAccountRequestWithBody(server string, providerShortName string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "ProviderShortName", providerShortName)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/cloud_access_providers/%s/accounts", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAddProviderAccountsRequest calls the generic AddProviderAccounts builder with application/json body
func NewAddProviderAccountsRequest(server string, providerShortName string, body AddProviderAccountsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAddProviderAccountsRequestWithBody(server, providerShortName, "application/json", bodyReader)
}

// NewAddProviderAccountsRequestWithBody generates requests for AddProviderAccounts with any type of body
func NewAddProviderAccountsRequestWithBody(server string, providerShortName string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "ProviderShortName", providerShortName)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/cloud_access_providers/%s/accounts", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewVerifyProviderAccountRequest calls the generic VerifyProviderAccount builder with application/json body
func NewVerifyProviderAccountRequest(server string, providerShortName string, accountID string, body VerifyProviderAccountJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewVerifyProviderAccountRequestWithBody(server, providerShortName, accountID, "application/json", bodyReader)
}

// NewVerifyProviderAccountRequestWithBody generates requests for VerifyProviderAccount with any type of body
func NewVerifyProviderAccountRequestWithBody(server string, providerShortName string, accountID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "ProviderShortName", providerShortName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParam("simple", false, "AccountID", accountID)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/cloud_access_providers/%s/accounts/%s/verification", pathParam0, pathParam1)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewEnableGoldImagesRequest calls the generic EnableGoldImages builder with application/json body
func NewEnableGoldImagesRequest(server string, providerShortName string, body EnableGoldImagesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewEnableGoldImagesRequestWithBody(server, providerShortName, "application/json", bodyReader)
}

// NewEnableGoldImagesRequestWithBody generates requests for EnableGoldImages with any type of body
func NewEnableGoldImagesRequestWithBody(server string, providerShortName string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "ProviderShortName", providerShortName)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/cloud_access_providers/%s/goldimage", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListErrataRequest generates requests for ListErrata
func NewListErrataRequest(server string, params *ListErrataParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/errata")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "offset", *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListErrataByContentSetArchRequest generates requests for ListErrataByContentSetArch
func NewListErrataByContentSetArchRequest(server string, contentSet string, arch string, params *ListErrataByContentSetArchParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "ContentSet", contentSet)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParam("simple", false, "Arch", arch)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/errata/cset/%s/arch/%s", pathParam0, pathParam1)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "offset", *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewShowErratumRequest generates requests for ShowErratum
func NewShowErratumRequest(server string, advisoryID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "AdvisoryID", advisoryID)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/errata/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListErratumPackagesRequest generates requests for ListErratumPackages
func NewListErratumPackagesRequest(server string, advisoryID string, params *ListErratumPackagesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "AdvisoryID", advisoryID)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/errata/%s/packages", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "offset", *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListErratumSystemsRequest generates requests for ListErratumSystems
func NewListErratumSystemsRequest(server string, advisoryID string, params *ListErratumSystemsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "AdvisoryID", advisoryID)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/errata/%s/systems", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "offset", *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListImagesByContentSetRequest generates requests for ListImagesByContentSet
func NewListImagesByContentSetRequest(server string, contentSet string, params *ListImagesByContentSetParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "ContentSet", contentSet)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/images/cset/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "offset", *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDownloadImageRequest generates requests for DownloadImage
func NewDownloadImageRequest(server string, checksum string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "checksum", checksum)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/images/%s/download", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListPackagesByContentSetArchRequest generates requests for ListPackagesByContentSetArch
func NewListPackagesByContentSetArchRequest(server string, contentSet string, arch string, params *ListPackagesByContentSetArchParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "ContentSet", contentSet)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParam("simple", false, "Arch", arch)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/packages/cset/%s/arch/%s", pathParam0, pathParam1)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "offset", *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Filter != nil {

		if queryFrag, err := runtime.StyleParam("form", false, "filter", *params.Filter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewShowPackageRequest generates requests for ShowPackage
func NewShowPackageRequest(server string, checksum string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "Checksum", checksum)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/packages/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDownloadPackageRequest generates requests for DownloadPackage
func NewDownloadPackageRequest(server string, checksum string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "checksum", checksum)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/packages/%s/download", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListSubscriptionsRequest generates requests for ListSubscriptions
func NewListSubscriptionsRequest(server string, params *ListSubscriptionsParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/subscriptions")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "offset", *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListSubContentSetsRequest generates requests for ListSubContentSets
func NewListSubContentSetsRequest(server string, subscriptionNumber string, params *ListSubContentSetsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "SubscriptionNumber", subscriptionNumber)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/subscriptions/%s/contentSets", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "offset", *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListSubSystemsRequest generates requests for ListSubSystems
func NewListSubSystemsRequest(server string, subscriptionNumber string, params *ListSubSystemsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "SubscriptionNumber", subscriptionNumber)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/subscriptions/%s/systems", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "offset", *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListSystemsRequest generates requests for ListSystems
func NewListSystemsRequest(server string, params *ListSystemsParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/systems")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "offset", *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Filter != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "filter", *params.Filter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Username != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "username", *params.Username); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRemoveSystemRequest generates requests for RemoveSystem
func NewRemoveSystemRequest(server string, systemUUID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "SystemUUID", systemUUID)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/systems/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewShowSystemRequest generates requests for ShowSystem
func NewShowSystemRequest(server string, systemUUID string, params *ShowSystemParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "SystemUUID", systemUUID)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/systems/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Include != nil {

		if queryFrag, err := runtime.StyleParam("form", false, "include", *params.Include); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAttachEntitlementRequest generates requests for AttachEntitlement
func NewAttachEntitlementRequest(server string, systemUUID string, params *AttachEntitlementParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "SystemUUID", systemUUID)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/systems/%s/entitlements", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if queryFrag, err := runtime.StyleParam("form", true, "pool", params.Pool); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if params.Quantity != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "quantity", *params.Quantity); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("POST", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListSystemErrataRequest generates requests for ListSystemErrata
func NewListSystemErrataRequest(server string, systemUUID string, params *ListSystemErrataParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "SystemUUID", systemUUID)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/systems/%s/errata", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "offset", *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListSystemPackagesRequest generates requests for ListSystemPackages
func NewListSystemPackagesRequest(server string, systemUUID string, params *ListSystemPackagesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "SystemUUID", systemUUID)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/systems/%s/packages", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "offset", *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ErrataDetail != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "errata_detail", *params.ErrataDetail); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Upgradeable != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "upgradeable", *params.Upgradeable); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Filter != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "filter", *params.Filter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListSystemPoolsRequest generates requests for ListSystemPools
func NewListSystemPoolsRequest(server string, systemUUID string, params *ListSystemPoolsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "SystemUUID", systemUUID)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/systems/%s/pools", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "offset", *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRemoveSystemEntitlementRequest generates requests for RemoveSystemEntitlement
func NewRemoveSystemEntitlementRequest(server string, systemUUID string, entitlementID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "SystemUUID", systemUUID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParam("simple", false, "EntitlementID", entitlementID)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/systems/%s/%s", pathParam0, pathParam1)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	req = req.WithContext(ctx)
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// ListAllocations request
	ListAllocationsWithResponse(ctx context.Context, params *ListAllocationsParams) (*ListAllocationsResponse, error)

	// CreateSatellite request
	CreateSatelliteWithResponse(ctx context.Context, params *CreateSatelliteParams) (*CreateSatelliteResponse, error)

	// RemoveAllocation request
	RemoveAllocationWithResponse(ctx context.Context, allocationUUID string, params *RemoveAllocationParams) (*RemoveAllocationResponse, error)

	// ShowAllocation request
	ShowAllocationWithResponse(ctx context.Context, allocationUUID string, params *ShowAllocationParams) (*ShowAllocationResponse, error)

	// AttachEntitlementAllocation request
	AttachEntitlementAllocationWithResponse(ctx context.Context, allocationUUID string, params *AttachEntitlementAllocationParams) (*AttachEntitlementAllocationResponse, error)

	// UpdateEntitlementAllocation request
	UpdateEntitlementAllocationWithResponse(ctx context.Context, allocationUUID string, entitlementUUID string, params *UpdateEntitlementAllocationParams) (*UpdateEntitlementAllocationResponse, error)

	// ExportAllocation request
	ExportAllocationWithResponse(ctx context.Context, allocationUUID string) (*ExportAllocationResponse, error)

	// GetExportAllocation request
	GetExportAllocationWithResponse(ctx context.Context, allocationUUID string, exportID string) (*GetExportAllocationResponse, error)

	// ExportJobAllocation request
	ExportJobAllocationWithResponse(ctx context.Context, allocationUUID string, exportJobID string) (*ExportJobAllocationResponse, error)

	// ListAllocationPools request
	ListAllocationPoolsWithResponse(ctx context.Context, allocationUUID string, params *ListAllocationPoolsParams) (*ListAllocationPoolsResponse, error)

	// RemoveAllocationEntitlement request
	RemoveAllocationEntitlementWithResponse(ctx context.Context, allocationUUID string, entitlementID string) (*RemoveAllocationEntitlementResponse, error)

	// ListEnabledCloudAccessProviders request
	ListEnabledCloudAccessProvidersWithResponse(ctx context.Context) (*ListEnabledCloudAccessProvidersResponse, error)

	// UpdateProviderAccount request  with any body
	UpdateProviderAccountWithBodyWithResponse(ctx context.Context, providerShortName string, contentType string, body io.Reader) (*UpdateProviderAccountResponse, error)

	UpdateProviderAccountWithResponse(ctx context.Context, providerShortName string, body UpdateProviderAccountJSONRequestBody) (*UpdateProviderAccountResponse, error)

	// RemoveProviderAccount request  with any body
	RemoveProviderAccountWithBodyWithResponse(ctx context.Context, providerShortName string, contentType string, body io.Reader) (*RemoveProviderAccountResponse, error)

	RemoveProviderAccountWithResponse(ctx context.Context, providerShortName string, body RemoveProviderAccountJSONRequestBody) (*RemoveProviderAccountResponse, error)

	// AddProviderAccounts request  with any body
	AddProviderAccountsWithBodyWithResponse(ctx context.Context, providerShortName string, contentType string, body io.Reader) (*AddProviderAccountsResponse, error)

	AddProviderAccountsWithResponse(ctx context.Context, providerShortName string, body AddProviderAccountsJSONRequestBody) (*AddProviderAccountsResponse, error)

	// VerifyProviderAccount request  with any body
	VerifyProviderAccountWithBodyWithResponse(ctx context.Context, providerShortName string, accountID string, contentType string, body io.Reader) (*VerifyProviderAccountResponse, error)

	VerifyProviderAccountWithResponse(ctx context.Context, providerShortName string, accountID string, body VerifyProviderAccountJSONRequestBody) (*VerifyProviderAccountResponse, error)

	// EnableGoldImages request  with any body
	EnableGoldImagesWithBodyWithResponse(ctx context.Context, providerShortName string, contentType string, body io.Reader) (*EnableGoldImagesResponse, error)

	EnableGoldImagesWithResponse(ctx context.Context, providerShortName string, body EnableGoldImagesJSONRequestBody) (*EnableGoldImagesResponse, error)

	// ListErrata request
	ListErrataWithResponse(ctx context.Context, params *ListErrataParams) (*ListErrataResponse, error)

	// ListErrataByContentSetArch request
	ListErrataByContentSetArchWithResponse(ctx context.Context, contentSet string, arch string, params *ListErrataByContentSetArchParams) (*ListErrataByContentSetArchResponse, error)

	// ShowErratum request
	ShowErratumWithResponse(ctx context.Context, advisoryID string) (*ShowErratumResponse, error)

	// ListErratumPackages request
	ListErratumPackagesWithResponse(ctx context.Context, advisoryID string, params *ListErratumPackagesParams) (*ListErratumPackagesResponse, error)

	// ListErratumSystems request
	ListErratumSystemsWithResponse(ctx context.Context, advisoryID string, params *ListErratumSystemsParams) (*ListErratumSystemsResponse, error)

	// ListImagesByContentSet request
	ListImagesByContentSetWithResponse(ctx context.Context, contentSet string, params *ListImagesByContentSetParams) (*ListImagesByContentSetResponse, error)

	// DownloadImage request
	DownloadImageWithResponse(ctx context.Context, checksum string) (*DownloadImageResponse, error)

	// ListPackagesByContentSetArch request
	ListPackagesByContentSetArchWithResponse(ctx context.Context, contentSet string, arch string, params *ListPackagesByContentSetArchParams) (*ListPackagesByContentSetArchResponse, error)

	// ShowPackage request
	ShowPackageWithResponse(ctx context.Context, checksum string) (*ShowPackageResponse, error)

	// DownloadPackage request
	DownloadPackageWithResponse(ctx context.Context, checksum string) (*DownloadPackageResponse, error)

	// ListSubscriptions request
	ListSubscriptionsWithResponse(ctx context.Context, params *ListSubscriptionsParams) (*ListSubscriptionsResponse, error)

	// ListSubContentSets request
	ListSubContentSetsWithResponse(ctx context.Context, subscriptionNumber string, params *ListSubContentSetsParams) (*ListSubContentSetsResponse, error)

	// ListSubSystems request
	ListSubSystemsWithResponse(ctx context.Context, subscriptionNumber string, params *ListSubSystemsParams) (*ListSubSystemsResponse, error)

	// ListSystems request
	ListSystemsWithResponse(ctx context.Context, params *ListSystemsParams) (*ListSystemsResponse, error)

	// RemoveSystem request
	RemoveSystemWithResponse(ctx context.Context, systemUUID string) (*RemoveSystemResponse, error)

	// ShowSystem request
	ShowSystemWithResponse(ctx context.Context, systemUUID string, params *ShowSystemParams) (*ShowSystemResponse, error)

	// AttachEntitlement request
	AttachEntitlementWithResponse(ctx context.Context, systemUUID string, params *AttachEntitlementParams) (*AttachEntitlementResponse, error)

	// ListSystemErrata request
	ListSystemErrataWithResponse(ctx context.Context, systemUUID string, params *ListSystemErrataParams) (*ListSystemErrataResponse, error)

	// ListSystemPackages request
	ListSystemPackagesWithResponse(ctx context.Context, systemUUID string, params *ListSystemPackagesParams) (*ListSystemPackagesResponse, error)

	// ListSystemPools request
	ListSystemPoolsWithResponse(ctx context.Context, systemUUID string, params *ListSystemPoolsParams) (*ListSystemPoolsResponse, error)

	// RemoveSystemEntitlement request
	RemoveSystemEntitlementWithResponse(ctx context.Context, systemUUID string, entitlementID string) (*RemoveSystemEntitlementResponse, error)
}

type ListAllocationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Body *[]Allocation `json:"body,omitempty"`

		// APIPageParam details the pagination parameters in APIResponse
		Pagination *APIPageParam `json:"pagination,omitempty"`
	}
	JSON400 *struct {

		// ErrorDetails details the Error in ErrorResponse
		Error *ErrorDetails `json:"error,omitempty"`
	}
	JSON401 *struct {

		// ErrorDetails details the Error in ErrorResponse
		Error *ErrorDetails `json:"error,omitempty"`
	}
	JSON403 *struct {

		// ErrorDetails details the Error in ErrorResponse
		Error *ErrorDetails `json:"error,omitempty"`
	}
	JSON404 *struct {

		// ErrorDetails details the Error in ErrorResponse
		Error *ErrorDetails `json:"error,omitempty"`
	}
	JSON500 *struct {

		// ErrorDetails details the Error in ErrorResponse
		Error *ErrorDetails `json:"error,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ListAllocationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListAllocationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateSatelliteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {

		// details of a subscription allocation
		Body *AllocationDetails `json:"body,omitempty"`
	}
	JSON400 *struct {

		// ErrorDetails details the Error in ErrorResponse
		Error *ErrorDetails `json:"error,omitempty"`
	}
	JSON401 *struct {

		// ErrorDetails details the Error in ErrorResponse
		Error *ErrorDetails `json:"error,omitempty"`
	}
	JSON403 *struct {

		// ErrorDetails details the Error in ErrorResponse
		Error *ErrorDetails `json:"error,omitempty"`
	}
	JSON404 *struct {

		// ErrorDetails details the Error in ErrorResponse
		Error *ErrorDetails `json:"error,omitempty"`
	}
	JSON500 *struct {

		// ErrorDetails details the Error in ErrorResponse
		Error *ErrorDetails `json:"error,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r CreateSatelliteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateSatelliteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RemoveAllocationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *struct {

		// ErrorDetails details the Error in ErrorResponse
		Error *ErrorDetails `json:"error,omitempty"`
	}
	JSON401 *struct {

		// ErrorDetails details the Error in ErrorResponse
		Error *ErrorDetails `json:"error,omitempty"`
	}
	JSON403 *struct {

		// ErrorDetails details the Error in ErrorResponse
		Error *ErrorDetails `json:"error,omitempty"`
	}
	JSON404 *struct {

		// ErrorDetails details the Error in ErrorResponse
		Error *ErrorDetails `json:"error,omitempty"`
	}
	JSON500 *struct {

		// ErrorDetails details the Error in ErrorResponse
		Error *ErrorDetails `json:"error,omitempty"`
	}
	JSON504 *struct {

		// ErrorDetails details the Error in ErrorResponse
		Error *ErrorDetails `json:"error,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r RemoveAllocationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RemoveAllocationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ShowAllocationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {

		// details of a subscription allocation
		Body *AllocationDetails `json:"body,omitempty"`
	}
	JSON400 *struct {

		// ErrorDetails details the Error in ErrorResponse
		Error *ErrorDetails `json:"error,omitempty"`
	}
	JSON401 *struct {

		// ErrorDetails details the Error in ErrorResponse
		Error *ErrorDetails `json:"error,omitempty"`
	}
	JSON403 *struct {

		// ErrorDetails details the Error in ErrorResponse
		Error *ErrorDetails `json:"error,omitempty"`
	}
	JSON404 *struct {

		// ErrorDetails details the Error in ErrorResponse
		Error *ErrorDetails `json:"error,omitempty"`
	}
	JSON500 *struct {

		// ErrorDetails details the Error in ErrorResponse
		Error *ErrorDetails `json:"error,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ShowAllocationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ShowAllocationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AttachEntitlementAllocationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {

		// details of a subscription allocation
		Body *AllocationDetails `json:"body,omitempty"`
	}
	JSON400 *struct {

		// ErrorDetails details the Error in ErrorResponse
		Error *ErrorDetails `json:"error,omitempty"`
	}
	JSON401 *struct {

		// ErrorDetails details the Error in ErrorResponse
		Error *ErrorDetails `json:"error,omitempty"`
	}
	JSON403 *struct {

		// ErrorDetails details the Error in ErrorResponse
		Error *ErrorDetails `json:"error,omitempty"`
	}
	JSON404 *struct {

		// ErrorDetails details the Error in ErrorResponse
		Error *ErrorDetails `json:"error,omitempty"`
	}
	JSON500 *struct {

		// ErrorDetails details the Error in ErrorResponse
		Error *ErrorDetails `json:"error,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r AttachEntitlementAllocationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AttachEntitlementAllocationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateEntitlementAllocationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {

		// details of a subscription allocation
		Body *AllocationDetails `json:"body,omitempty"`
	}
	JSON400 *struct {

		// ErrorDetails details the Error in ErrorResponse
		Error *ErrorDetails `json:"error,omitempty"`
	}
	JSON401 *struct {

		// ErrorDetails details the Error in ErrorResponse
		Error *ErrorDetails `json:"error,omitempty"`
	}
	JSON403 *struct {

		// ErrorDetails details the Error in ErrorResponse
		Error *ErrorDetails `json:"error,omitempty"`
	}
	JSON404 *struct {

		// ErrorDetails details the Error in ErrorResponse
		Error *ErrorDetails `json:"error,omitempty"`
	}
	JSON500 *struct {

		// ErrorDetails details the Error in ErrorResponse
		Error *ErrorDetails `json:"error,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r UpdateEntitlementAllocationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateEntitlementAllocationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ExportAllocationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Body *ExportResponse `json:"body,omitempty"`
	}
	JSON400 *struct {

		// ErrorDetails details the Error in ErrorResponse
		Error *ErrorDetails `json:"error,omitempty"`
	}
	JSON401 *struct {

		// ErrorDetails details the Error in ErrorResponse
		Error *ErrorDetails `json:"error,omitempty"`
	}
	JSON403 *struct {

		// ErrorDetails details the Error in ErrorResponse
		Error *ErrorDetails `json:"error,omitempty"`
	}
	JSON404 *struct {

		// ErrorDetails details the Error in ErrorResponse
		Error *ErrorDetails `json:"error,omitempty"`
	}
	JSON500 *struct {

		// ErrorDetails details the Error in ErrorResponse
		Error *ErrorDetails `json:"error,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ExportAllocationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ExportAllocationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetExportAllocationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetExportAllocationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetExportAllocationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ExportJobAllocationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Body *ExportJobResponse `json:"body,omitempty"`
	}
	JSON202 *struct {
		Body *OngoingExportJobResponse `json:"body,omitempty"`
	}
	JSON400 *struct {

		// ErrorDetails details the Error in ErrorResponse
		Error *ErrorDetails `json:"error,omitempty"`
	}
	JSON401 *struct {

		// ErrorDetails details the Error in ErrorResponse
		Error *ErrorDetails `json:"error,omitempty"`
	}
	JSON403 *struct {

		// ErrorDetails details the Error in ErrorResponse
		Error *ErrorDetails `json:"error,omitempty"`
	}
	JSON404 *struct {

		// ErrorDetails details the Error in ErrorResponse
		Error *ErrorDetails `json:"error,omitempty"`
	}
	JSON406 *struct {

		// ErrorDetails details the Error in ErrorResponse
		Error *ErrorDetails `json:"error,omitempty"`
	}
	JSON500 *struct {

		// ErrorDetails details the Error in ErrorResponse
		Error *ErrorDetails `json:"error,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ExportJobAllocationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ExportJobAllocationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListAllocationPoolsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PoolsListMock
	JSON400      *struct {

		// ErrorDetails details the Error in ErrorResponse
		Error *ErrorDetails `json:"error,omitempty"`
	}
	JSON401 *struct {

		// ErrorDetails details the Error in ErrorResponse
		Error *ErrorDetails `json:"error,omitempty"`
	}
	JSON403 *struct {

		// ErrorDetails details the Error in ErrorResponse
		Error *ErrorDetails `json:"error,omitempty"`
	}
	JSON404 *struct {

		// ErrorDetails details the Error in ErrorResponse
		Error *ErrorDetails `json:"error,omitempty"`
	}
	JSON500 *struct {

		// ErrorDetails details the Error in ErrorResponse
		Error *ErrorDetails `json:"error,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ListAllocationPoolsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListAllocationPoolsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RemoveAllocationEntitlementResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *struct {

		// ErrorDetails details the Error in ErrorResponse
		Error *ErrorDetails `json:"error,omitempty"`
	}
	JSON401 *struct {

		// ErrorDetails details the Error in ErrorResponse
		Error *ErrorDetails `json:"error,omitempty"`
	}
	JSON403 *struct {

		// ErrorDetails details the Error in ErrorResponse
		Error *ErrorDetails `json:"error,omitempty"`
	}
	JSON404 *struct {

		// ErrorDetails details the Error in ErrorResponse
		Error *ErrorDetails `json:"error,omitempty"`
	}
	JSON500 *struct {

		// ErrorDetails details the Error in ErrorResponse
		Error *ErrorDetails `json:"error,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r RemoveAllocationEntitlementResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RemoveAllocationEntitlementResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListEnabledCloudAccessProvidersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Body *[]EnabledCloudAccessProvider `json:"body,omitempty"`
	}
	JSON400 *struct {

		// ErrorDetails details the Error in ErrorResponse
		Error *ErrorDetails `json:"error,omitempty"`
	}
	JSON401 *struct {

		// ErrorDetails details the Error in ErrorResponse
		Error *ErrorDetails `json:"error,omitempty"`
	}
	JSON403 *struct {

		// ErrorDetails details the Error in ErrorResponse
		Error *ErrorDetails `json:"error,omitempty"`
	}
	JSON404 *struct {

		// ErrorDetails details the Error in ErrorResponse
		Error *ErrorDetails `json:"error,omitempty"`
	}
	JSON500 *struct {

		// ErrorDetails details the Error in ErrorResponse
		Error *ErrorDetails `json:"error,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ListEnabledCloudAccessProvidersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListEnabledCloudAccessProvidersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateProviderAccountResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *struct {

		// ErrorDetails details the Error in ErrorResponse
		Error *ErrorDetails `json:"error,omitempty"`
	}
	JSON401 *struct {

		// ErrorDetails details the Error in ErrorResponse
		Error *ErrorDetails `json:"error,omitempty"`
	}
	JSON403 *struct {

		// ErrorDetails details the Error in ErrorResponse
		Error *ErrorDetails `json:"error,omitempty"`
	}
	JSON404 *struct {

		// ErrorDetails details the Error in ErrorResponse
		Error *ErrorDetails `json:"error,omitempty"`
	}
	JSON500 *struct {

		// ErrorDetails details the Error in ErrorResponse
		Error *ErrorDetails `json:"error,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r UpdateProviderAccountResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateProviderAccountResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RemoveProviderAccountResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *struct {

		// ErrorDetails details the Error in ErrorResponse
		Error *ErrorDetails `json:"error,omitempty"`
	}
	JSON401 *struct {

		// ErrorDetails details the Error in ErrorResponse
		Error *ErrorDetails `json:"error,omitempty"`
	}
	JSON403 *struct {

		// ErrorDetails details the Error in ErrorResponse
		Error *ErrorDetails `json:"error,omitempty"`
	}
	JSON404 *struct {

		// ErrorDetails details the Error in ErrorResponse
		Error *ErrorDetails `json:"error,omitempty"`
	}
	JSON500 *struct {

		// ErrorDetails details the Error in ErrorResponse
		Error *ErrorDetails `json:"error,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r RemoveProviderAccountResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RemoveProviderAccountResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddProviderAccountsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *struct {

		// ErrorDetails details the Error in ErrorResponse
		Error *ErrorDetails `json:"error,omitempty"`
	}
	JSON401 *struct {

		// ErrorDetails details the Error in ErrorResponse
		Error *ErrorDetails `json:"error,omitempty"`
	}
	JSON403 *struct {

		// ErrorDetails details the Error in ErrorResponse
		Error *ErrorDetails `json:"error,omitempty"`
	}
	JSON404 *struct {

		// ErrorDetails details the Error in ErrorResponse
		Error *ErrorDetails `json:"error,omitempty"`
	}
	JSON500 *struct {

		// ErrorDetails details the Error in ErrorResponse
		Error *ErrorDetails `json:"error,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r AddProviderAccountsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddProviderAccountsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type VerifyProviderAccountResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *struct {

		// ErrorDetails details the Error in ErrorResponse
		Error *ErrorDetails `json:"error,omitempty"`
	}
	JSON401 *struct {

		// ErrorDetails details the Error in ErrorResponse
		Error *ErrorDetails `json:"error,omitempty"`
	}
	JSON403 *struct {

		// ErrorDetails details the Error in ErrorResponse
		Error *ErrorDetails `json:"error,omitempty"`
	}
	JSON404 *struct {

		// ErrorDetails details the Error in ErrorResponse
		Error *ErrorDetails `json:"error,omitempty"`
	}
	JSON500 *struct {

		// ErrorDetails details the Error in ErrorResponse
		Error *ErrorDetails `json:"error,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r VerifyProviderAccountResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r VerifyProviderAccountResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EnableGoldImagesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *struct {

		// ErrorDetails details the Error in ErrorResponse
		Error *ErrorDetails `json:"error,omitempty"`
	}
	JSON401 *struct {

		// ErrorDetails details the Error in ErrorResponse
		Error *ErrorDetails `json:"error,omitempty"`
	}
	JSON403 *struct {

		// ErrorDetails details the Error in ErrorResponse
		Error *ErrorDetails `json:"error,omitempty"`
	}
	JSON404 *struct {

		// ErrorDetails details the Error in ErrorResponse
		Error *ErrorDetails `json:"error,omitempty"`
	}
	JSON500 *struct {

		// ErrorDetails details the Error in ErrorResponse
		Error *ErrorDetails `json:"error,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r EnableGoldImagesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EnableGoldImagesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListErrataResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MyErrataListMock
	JSON400      *struct {

		// ErrorDetails details the Error in ErrorResponse
		Error *ErrorDetails `json:"error,omitempty"`
	}
	JSON401 *struct {

		// ErrorDetails details the Error in ErrorResponse
		Error *ErrorDetails `json:"error,omitempty"`
	}
	JSON403 *struct {

		// ErrorDetails details the Error in ErrorResponse
		Error *ErrorDetails `json:"error,omitempty"`
	}
	JSON404 *struct {

		// ErrorDetails details the Error in ErrorResponse
		Error *ErrorDetails `json:"error,omitempty"`
	}
	JSON500 *struct {

		// ErrorDetails details the Error in ErrorResponse
		Error *ErrorDetails `json:"error,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ListErrataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListErrataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListErrataByContentSetArchResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ContentSetArchMock
	JSON400      *struct {

		// ErrorDetails details the Error in ErrorResponse
		Error *ErrorDetails `json:"error,omitempty"`
	}
	JSON401 *struct {

		// ErrorDetails details the Error in ErrorResponse
		Error *ErrorDetails `json:"error,omitempty"`
	}
	JSON403 *struct {

		// ErrorDetails details the Error in ErrorResponse
		Error *ErrorDetails `json:"error,omitempty"`
	}
	JSON404 *struct {

		// ErrorDetails details the Error in ErrorResponse
		Error *ErrorDetails `json:"error,omitempty"`
	}
	JSON500 *struct {

		// ErrorDetails details the Error in ErrorResponse
		Error *ErrorDetails `json:"error,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ListErrataByContentSetArchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListErrataByContentSetArchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ShowErratumResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Body *ErratumDetails `json:"body,omitempty"`
	}
	JSON400 *struct {

		// ErrorDetails details the Error in ErrorResponse
		Error *ErrorDetails `json:"error,omitempty"`
	}
	JSON401 *struct {

		// ErrorDetails details the Error in ErrorResponse
		Error *ErrorDetails `json:"error,omitempty"`
	}
	JSON403 *struct {

		// ErrorDetails details the Error in ErrorResponse
		Error *ErrorDetails `json:"error,omitempty"`
	}
	JSON404 *struct {

		// ErrorDetails details the Error in ErrorResponse
		Error *ErrorDetails `json:"error,omitempty"`
	}
	JSON500 *struct {

		// ErrorDetails details the Error in ErrorResponse
		Error *ErrorDetails `json:"error,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ShowErratumResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ShowErratumResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListErratumPackagesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PkgListMock
	JSON400      *struct {

		// ErrorDetails details the Error in ErrorResponse
		Error *ErrorDetails `json:"error,omitempty"`
	}
	JSON401 *struct {

		// ErrorDetails details the Error in ErrorResponse
		Error *ErrorDetails `json:"error,omitempty"`
	}
	JSON403 *struct {

		// ErrorDetails details the Error in ErrorResponse
		Error *ErrorDetails `json:"error,omitempty"`
	}
	JSON404 *struct {

		// ErrorDetails details the Error in ErrorResponse
		Error *ErrorDetails `json:"error,omitempty"`
	}
	JSON500 *struct {

		// ErrorDetails details the Error in ErrorResponse
		Error *ErrorDetails `json:"error,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ListErratumPackagesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListErratumPackagesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListErratumSystemsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SystemListMock
	JSON400      *struct {

		// ErrorDetails details the Error in ErrorResponse
		Error *ErrorDetails `json:"error,omitempty"`
	}
	JSON401 *struct {

		// ErrorDetails details the Error in ErrorResponse
		Error *ErrorDetails `json:"error,omitempty"`
	}
	JSON403 *struct {

		// ErrorDetails details the Error in ErrorResponse
		Error *ErrorDetails `json:"error,omitempty"`
	}
	JSON404 *struct {

		// ErrorDetails details the Error in ErrorResponse
		Error *ErrorDetails `json:"error,omitempty"`
	}
	JSON500 *struct {

		// ErrorDetails details the Error in ErrorResponse
		Error *ErrorDetails `json:"error,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ListErratumSystemsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListErratumSystemsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListImagesByContentSetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Body *[]ImageInContentSet `json:"body,omitempty"`

		// APIPageParam details the pagination parameters in APIResponse
		Pagination *APIPageParam `json:"pagination,omitempty"`
	}
	JSON400 *struct {

		// ErrorDetails details the Error in ErrorResponse
		Error *ErrorDetails `json:"error,omitempty"`
	}
	JSON401 *struct {

		// ErrorDetails details the Error in ErrorResponse
		Error *ErrorDetails `json:"error,omitempty"`
	}
	JSON403 *struct {

		// ErrorDetails details the Error in ErrorResponse
		Error *ErrorDetails `json:"error,omitempty"`
	}
	JSON404 *struct {

		// ErrorDetails details the Error in ErrorResponse
		Error *ErrorDetails `json:"error,omitempty"`
	}
	JSON500 *struct {

		// ErrorDetails details the Error in ErrorResponse
		Error *ErrorDetails `json:"error,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ListImagesByContentSetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListImagesByContentSetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DownloadImageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON307      *struct {
		Body *DownloadLink `json:"body,omitempty"`
	}
	JSON400 *struct {

		// ErrorDetails details the Error in ErrorResponse
		Error *ErrorDetails `json:"error,omitempty"`
	}
	JSON401 *struct {

		// ErrorDetails details the Error in ErrorResponse
		Error *ErrorDetails `json:"error,omitempty"`
	}
	JSON403 *struct {

		// ErrorDetails details the Error in ErrorResponse
		Error *ErrorDetails `json:"error,omitempty"`
	}
	JSON404 *struct {

		// ErrorDetails details the Error in ErrorResponse
		Error *ErrorDetails `json:"error,omitempty"`
	}
	JSON500 *struct {

		// ErrorDetails details the Error in ErrorResponse
		Error *ErrorDetails `json:"error,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r DownloadImageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DownloadImageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListPackagesByContentSetArchResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Body *[]PkgContentSetArch `json:"body,omitempty"`

		// APIPageParam details the pagination parameters in APIResponse
		Pagination *APIPageParam `json:"pagination,omitempty"`
	}
	JSON400 *struct {

		// ErrorDetails details the Error in ErrorResponse
		Error *ErrorDetails `json:"error,omitempty"`
	}
	JSON401 *struct {

		// ErrorDetails details the Error in ErrorResponse
		Error *ErrorDetails `json:"error,omitempty"`
	}
	JSON403 *struct {

		// ErrorDetails details the Error in ErrorResponse
		Error *ErrorDetails `json:"error,omitempty"`
	}
	JSON404 *struct {

		// ErrorDetails details the Error in ErrorResponse
		Error *ErrorDetails `json:"error,omitempty"`
	}
	JSON500 *struct {

		// ErrorDetails details the Error in ErrorResponse
		Error *ErrorDetails `json:"error,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ListPackagesByContentSetArchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListPackagesByContentSetArchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ShowPackageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Body *PkgDetails `json:"body,omitempty"`
	}
	JSON400 *struct {

		// ErrorDetails details the Error in ErrorResponse
		Error *ErrorDetails `json:"error,omitempty"`
	}
	JSON401 *struct {

		// ErrorDetails details the Error in ErrorResponse
		Error *ErrorDetails `json:"error,omitempty"`
	}
	JSON403 *struct {

		// ErrorDetails details the Error in ErrorResponse
		Error *ErrorDetails `json:"error,omitempty"`
	}
	JSON404 *struct {

		// ErrorDetails details the Error in ErrorResponse
		Error *ErrorDetails `json:"error,omitempty"`
	}
	JSON500 *struct {

		// ErrorDetails details the Error in ErrorResponse
		Error *ErrorDetails `json:"error,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ShowPackageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ShowPackageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DownloadPackageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON307      *struct {
		Body *DownloadLink `json:"body,omitempty"`
	}
	JSON400 *struct {

		// ErrorDetails details the Error in ErrorResponse
		Error *ErrorDetails `json:"error,omitempty"`
	}
	JSON401 *struct {

		// ErrorDetails details the Error in ErrorResponse
		Error *ErrorDetails `json:"error,omitempty"`
	}
	JSON403 *struct {

		// ErrorDetails details the Error in ErrorResponse
		Error *ErrorDetails `json:"error,omitempty"`
	}
	JSON404 *struct {

		// ErrorDetails details the Error in ErrorResponse
		Error *ErrorDetails `json:"error,omitempty"`
	}
	JSON500 *struct {

		// ErrorDetails details the Error in ErrorResponse
		Error *ErrorDetails `json:"error,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r DownloadPackageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DownloadPackageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListSubscriptionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {

		// ListResponse is the actual collection of subscription details that gets
		// rendered
		Body *ListResponse `json:"body,omitempty"`

		// APIPageParam details the pagination parameters in APIResponse
		Pagination *APIPageParam `json:"pagination,omitempty"`
	}
	JSON400 *struct {

		// ErrorDetails details the Error in ErrorResponse
		Error *ErrorDetails `json:"error,omitempty"`
	}
	JSON401 *struct {

		// ErrorDetails details the Error in ErrorResponse
		Error *ErrorDetails `json:"error,omitempty"`
	}
	JSON403 *struct {

		// ErrorDetails details the Error in ErrorResponse
		Error *ErrorDetails `json:"error,omitempty"`
	}
	JSON404 *struct {

		// ErrorDetails details the Error in ErrorResponse
		Error *ErrorDetails `json:"error,omitempty"`
	}
	JSON500 *struct {

		// ErrorDetails details the Error in ErrorResponse
		Error *ErrorDetails `json:"error,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ListSubscriptionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListSubscriptionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListSubContentSetsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Body *[]ContentSet `json:"body,omitempty"`

		// APIPageParam details the pagination parameters in APIResponse
		Pagination *APIPageParam `json:"pagination,omitempty"`
	}
	JSON400 *struct {

		// ErrorDetails details the Error in ErrorResponse
		Error *ErrorDetails `json:"error,omitempty"`
	}
	JSON401 *struct {

		// ErrorDetails details the Error in ErrorResponse
		Error *ErrorDetails `json:"error,omitempty"`
	}
	JSON403 *struct {

		// ErrorDetails details the Error in ErrorResponse
		Error *ErrorDetails `json:"error,omitempty"`
	}
	JSON404 *struct {

		// ErrorDetails details the Error in ErrorResponse
		Error *ErrorDetails `json:"error,omitempty"`
	}
	JSON500 *struct {

		// ErrorDetails details the Error in ErrorResponse
		Error *ErrorDetails `json:"error,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ListSubContentSetsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListSubContentSetsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListSubSystemsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Body *[]SystemListSystem `json:"body,omitempty"`

		// APIPageParam details the pagination parameters in APIResponse
		Pagination *APIPageParam `json:"pagination,omitempty"`
	}
	JSON400 *struct {

		// ErrorDetails details the Error in ErrorResponse
		Error *ErrorDetails `json:"error,omitempty"`
	}
	JSON401 *struct {

		// ErrorDetails details the Error in ErrorResponse
		Error *ErrorDetails `json:"error,omitempty"`
	}
	JSON403 *struct {

		// ErrorDetails details the Error in ErrorResponse
		Error *ErrorDetails `json:"error,omitempty"`
	}
	JSON404 *struct {

		// ErrorDetails details the Error in ErrorResponse
		Error *ErrorDetails `json:"error,omitempty"`
	}
	JSON500 *struct {

		// ErrorDetails details the Error in ErrorResponse
		Error *ErrorDetails `json:"error,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ListSubSystemsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListSubSystemsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListSystemsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {

		// systemList is a System Slice
		Body *SystemList `json:"body,omitempty"`

		// APIPageParam details the pagination parameters in APIResponse
		Pagination *APIPageParam `json:"pagination,omitempty"`
	}
	JSON400 *struct {

		// ErrorDetails details the Error in ErrorResponse
		Error *ErrorDetails `json:"error,omitempty"`
	}
	JSON401 *struct {

		// ErrorDetails details the Error in ErrorResponse
		Error *ErrorDetails `json:"error,omitempty"`
	}
	JSON403 *struct {

		// ErrorDetails details the Error in ErrorResponse
		Error *ErrorDetails `json:"error,omitempty"`
	}
	JSON404 *struct {

		// ErrorDetails details the Error in ErrorResponse
		Error *ErrorDetails `json:"error,omitempty"`
	}
	JSON500 *struct {

		// ErrorDetails details the Error in ErrorResponse
		Error *ErrorDetails `json:"error,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ListSystemsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListSystemsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RemoveSystemResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *struct {

		// ErrorDetails details the Error in ErrorResponse
		Error *ErrorDetails `json:"error,omitempty"`
	}
	JSON401 *struct {

		// ErrorDetails details the Error in ErrorResponse
		Error *ErrorDetails `json:"error,omitempty"`
	}
	JSON403 *struct {

		// ErrorDetails details the Error in ErrorResponse
		Error *ErrorDetails `json:"error,omitempty"`
	}
	JSON404 *struct {

		// ErrorDetails details the Error in ErrorResponse
		Error *ErrorDetails `json:"error,omitempty"`
	}
	JSON500 *struct {

		// ErrorDetails details the Error in ErrorResponse
		Error *ErrorDetails `json:"error,omitempty"`
	}
	JSON504 *struct {

		// ErrorDetails details the Error in ErrorResponse
		Error *ErrorDetails `json:"error,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r RemoveSystemResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RemoveSystemResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ShowSystemResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Body *System `json:"body,omitempty"`
	}
	JSON400 *struct {

		// ErrorDetails details the Error in ErrorResponse
		Error *ErrorDetails `json:"error,omitempty"`
	}
	JSON401 *struct {

		// ErrorDetails details the Error in ErrorResponse
		Error *ErrorDetails `json:"error,omitempty"`
	}
	JSON403 *struct {

		// ErrorDetails details the Error in ErrorResponse
		Error *ErrorDetails `json:"error,omitempty"`
	}
	JSON404 *struct {

		// ErrorDetails details the Error in ErrorResponse
		Error *ErrorDetails `json:"error,omitempty"`
	}
	JSON500 *struct {

		// ErrorDetails details the Error in ErrorResponse
		Error *ErrorDetails `json:"error,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ShowSystemResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ShowSystemResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AttachEntitlementResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Body *System `json:"body,omitempty"`
	}
	JSON400 *struct {

		// ErrorDetails details the Error in ErrorResponse
		Error *ErrorDetails `json:"error,omitempty"`
	}
	JSON401 *struct {

		// ErrorDetails details the Error in ErrorResponse
		Error *ErrorDetails `json:"error,omitempty"`
	}
	JSON403 *struct {

		// ErrorDetails details the Error in ErrorResponse
		Error *ErrorDetails `json:"error,omitempty"`
	}
	JSON404 *struct {

		// ErrorDetails details the Error in ErrorResponse
		Error *ErrorDetails `json:"error,omitempty"`
	}
	JSON500 *struct {

		// ErrorDetails details the Error in ErrorResponse
		Error *ErrorDetails `json:"error,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r AttachEntitlementResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AttachEntitlementResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListSystemErrataResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Body *[]ErratumForSystem `json:"body,omitempty"`

		// APIPageParam details the pagination parameters in APIResponse
		Pagination *APIPageParam `json:"pagination,omitempty"`
	}
	JSON400 *struct {

		// ErrorDetails details the Error in ErrorResponse
		Error *ErrorDetails `json:"error,omitempty"`
	}
	JSON401 *struct {

		// ErrorDetails details the Error in ErrorResponse
		Error *ErrorDetails `json:"error,omitempty"`
	}
	JSON403 *struct {

		// ErrorDetails details the Error in ErrorResponse
		Error *ErrorDetails `json:"error,omitempty"`
	}
	JSON404 *struct {

		// ErrorDetails details the Error in ErrorResponse
		Error *ErrorDetails `json:"error,omitempty"`
	}
	JSON500 *struct {

		// ErrorDetails details the Error in ErrorResponse
		Error *ErrorDetails `json:"error,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ListSystemErrataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListSystemErrataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListSystemPackagesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Body *[]PackageForSystem `json:"body,omitempty"`

		// APIPageParam details the pagination parameters in APIResponse
		Pagination *APIPageParam `json:"pagination,omitempty"`
	}
	JSON400 *struct {

		// ErrorDetails details the Error in ErrorResponse
		Error *ErrorDetails `json:"error,omitempty"`
	}
	JSON401 *struct {

		// ErrorDetails details the Error in ErrorResponse
		Error *ErrorDetails `json:"error,omitempty"`
	}
	JSON403 *struct {

		// ErrorDetails details the Error in ErrorResponse
		Error *ErrorDetails `json:"error,omitempty"`
	}
	JSON404 *struct {

		// ErrorDetails details the Error in ErrorResponse
		Error *ErrorDetails `json:"error,omitempty"`
	}
	JSON500 *struct {

		// ErrorDetails details the Error in ErrorResponse
		Error *ErrorDetails `json:"error,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ListSystemPackagesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListSystemPackagesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListSystemPoolsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PoolsListMock
	JSON400      *struct {

		// ErrorDetails details the Error in ErrorResponse
		Error *ErrorDetails `json:"error,omitempty"`
	}
	JSON401 *struct {

		// ErrorDetails details the Error in ErrorResponse
		Error *ErrorDetails `json:"error,omitempty"`
	}
	JSON403 *struct {

		// ErrorDetails details the Error in ErrorResponse
		Error *ErrorDetails `json:"error,omitempty"`
	}
	JSON404 *struct {

		// ErrorDetails details the Error in ErrorResponse
		Error *ErrorDetails `json:"error,omitempty"`
	}
	JSON500 *struct {

		// ErrorDetails details the Error in ErrorResponse
		Error *ErrorDetails `json:"error,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ListSystemPoolsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListSystemPoolsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RemoveSystemEntitlementResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *struct {

		// ErrorDetails details the Error in ErrorResponse
		Error *ErrorDetails `json:"error,omitempty"`
	}
	JSON401 *struct {

		// ErrorDetails details the Error in ErrorResponse
		Error *ErrorDetails `json:"error,omitempty"`
	}
	JSON403 *struct {

		// ErrorDetails details the Error in ErrorResponse
		Error *ErrorDetails `json:"error,omitempty"`
	}
	JSON404 *struct {

		// ErrorDetails details the Error in ErrorResponse
		Error *ErrorDetails `json:"error,omitempty"`
	}
	JSON500 *struct {

		// ErrorDetails details the Error in ErrorResponse
		Error *ErrorDetails `json:"error,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r RemoveSystemEntitlementResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RemoveSystemEntitlementResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// ListAllocationsWithResponse request returning *ListAllocationsResponse
func (c *ClientWithResponses) ListAllocationsWithResponse(ctx context.Context, params *ListAllocationsParams) (*ListAllocationsResponse, error) {
	rsp, err := c.ListAllocations(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseListAllocationsResponse(rsp)
}

// CreateSatelliteWithResponse request returning *CreateSatelliteResponse
func (c *ClientWithResponses) CreateSatelliteWithResponse(ctx context.Context, params *CreateSatelliteParams) (*CreateSatelliteResponse, error) {
	rsp, err := c.CreateSatellite(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseCreateSatelliteResponse(rsp)
}

// RemoveAllocationWithResponse request returning *RemoveAllocationResponse
func (c *ClientWithResponses) RemoveAllocationWithResponse(ctx context.Context, allocationUUID string, params *RemoveAllocationParams) (*RemoveAllocationResponse, error) {
	rsp, err := c.RemoveAllocation(ctx, allocationUUID, params)
	if err != nil {
		return nil, err
	}
	return ParseRemoveAllocationResponse(rsp)
}

// ShowAllocationWithResponse request returning *ShowAllocationResponse
func (c *ClientWithResponses) ShowAllocationWithResponse(ctx context.Context, allocationUUID string, params *ShowAllocationParams) (*ShowAllocationResponse, error) {
	rsp, err := c.ShowAllocation(ctx, allocationUUID, params)
	if err != nil {
		return nil, err
	}
	return ParseShowAllocationResponse(rsp)
}

// AttachEntitlementAllocationWithResponse request returning *AttachEntitlementAllocationResponse
func (c *ClientWithResponses) AttachEntitlementAllocationWithResponse(ctx context.Context, allocationUUID string, params *AttachEntitlementAllocationParams) (*AttachEntitlementAllocationResponse, error) {
	rsp, err := c.AttachEntitlementAllocation(ctx, allocationUUID, params)
	if err != nil {
		return nil, err
	}
	return ParseAttachEntitlementAllocationResponse(rsp)
}

// UpdateEntitlementAllocationWithResponse request returning *UpdateEntitlementAllocationResponse
func (c *ClientWithResponses) UpdateEntitlementAllocationWithResponse(ctx context.Context, allocationUUID string, entitlementUUID string, params *UpdateEntitlementAllocationParams) (*UpdateEntitlementAllocationResponse, error) {
	rsp, err := c.UpdateEntitlementAllocation(ctx, allocationUUID, entitlementUUID, params)
	if err != nil {
		return nil, err
	}
	return ParseUpdateEntitlementAllocationResponse(rsp)
}

// ExportAllocationWithResponse request returning *ExportAllocationResponse
func (c *ClientWithResponses) ExportAllocationWithResponse(ctx context.Context, allocationUUID string) (*ExportAllocationResponse, error) {
	rsp, err := c.ExportAllocation(ctx, allocationUUID)
	if err != nil {
		return nil, err
	}
	return ParseExportAllocationResponse(rsp)
}

// GetExportAllocationWithResponse request returning *GetExportAllocationResponse
func (c *ClientWithResponses) GetExportAllocationWithResponse(ctx context.Context, allocationUUID string, exportID string) (*GetExportAllocationResponse, error) {
	rsp, err := c.GetExportAllocation(ctx, allocationUUID, exportID)
	if err != nil {
		return nil, err
	}
	return ParseGetExportAllocationResponse(rsp)
}

// ExportJobAllocationWithResponse request returning *ExportJobAllocationResponse
func (c *ClientWithResponses) ExportJobAllocationWithResponse(ctx context.Context, allocationUUID string, exportJobID string) (*ExportJobAllocationResponse, error) {
	rsp, err := c.ExportJobAllocation(ctx, allocationUUID, exportJobID)
	if err != nil {
		return nil, err
	}
	return ParseExportJobAllocationResponse(rsp)
}

// ListAllocationPoolsWithResponse request returning *ListAllocationPoolsResponse
func (c *ClientWithResponses) ListAllocationPoolsWithResponse(ctx context.Context, allocationUUID string, params *ListAllocationPoolsParams) (*ListAllocationPoolsResponse, error) {
	rsp, err := c.ListAllocationPools(ctx, allocationUUID, params)
	if err != nil {
		return nil, err
	}
	return ParseListAllocationPoolsResponse(rsp)
}

// RemoveAllocationEntitlementWithResponse request returning *RemoveAllocationEntitlementResponse
func (c *ClientWithResponses) RemoveAllocationEntitlementWithResponse(ctx context.Context, allocationUUID string, entitlementID string) (*RemoveAllocationEntitlementResponse, error) {
	rsp, err := c.RemoveAllocationEntitlement(ctx, allocationUUID, entitlementID)
	if err != nil {
		return nil, err
	}
	return ParseRemoveAllocationEntitlementResponse(rsp)
}

// ListEnabledCloudAccessProvidersWithResponse request returning *ListEnabledCloudAccessProvidersResponse
func (c *ClientWithResponses) ListEnabledCloudAccessProvidersWithResponse(ctx context.Context) (*ListEnabledCloudAccessProvidersResponse, error) {
	rsp, err := c.ListEnabledCloudAccessProviders(ctx)
	if err != nil {
		return nil, err
	}
	return ParseListEnabledCloudAccessProvidersResponse(rsp)
}

// UpdateProviderAccountWithBodyWithResponse request with arbitrary body returning *UpdateProviderAccountResponse
func (c *ClientWithResponses) UpdateProviderAccountWithBodyWithResponse(ctx context.Context, providerShortName string, contentType string, body io.Reader) (*UpdateProviderAccountResponse, error) {
	rsp, err := c.UpdateProviderAccountWithBody(ctx, providerShortName, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseUpdateProviderAccountResponse(rsp)
}

func (c *ClientWithResponses) UpdateProviderAccountWithResponse(ctx context.Context, providerShortName string, body UpdateProviderAccountJSONRequestBody) (*UpdateProviderAccountResponse, error) {
	rsp, err := c.UpdateProviderAccount(ctx, providerShortName, body)
	if err != nil {
		return nil, err
	}
	return ParseUpdateProviderAccountResponse(rsp)
}

// RemoveProviderAccountWithBodyWithResponse request with arbitrary body returning *RemoveProviderAccountResponse
func (c *ClientWithResponses) RemoveProviderAccountWithBodyWithResponse(ctx context.Context, providerShortName string, contentType string, body io.Reader) (*RemoveProviderAccountResponse, error) {
	rsp, err := c.RemoveProviderAccountWithBody(ctx, providerShortName, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseRemoveProviderAccountResponse(rsp)
}

func (c *ClientWithResponses) RemoveProviderAccountWithResponse(ctx context.Context, providerShortName string, body RemoveProviderAccountJSONRequestBody) (*RemoveProviderAccountResponse, error) {
	rsp, err := c.RemoveProviderAccount(ctx, providerShortName, body)
	if err != nil {
		return nil, err
	}
	return ParseRemoveProviderAccountResponse(rsp)
}

// AddProviderAccountsWithBodyWithResponse request with arbitrary body returning *AddProviderAccountsResponse
func (c *ClientWithResponses) AddProviderAccountsWithBodyWithResponse(ctx context.Context, providerShortName string, contentType string, body io.Reader) (*AddProviderAccountsResponse, error) {
	rsp, err := c.AddProviderAccountsWithBody(ctx, providerShortName, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseAddProviderAccountsResponse(rsp)
}

func (c *ClientWithResponses) AddProviderAccountsWithResponse(ctx context.Context, providerShortName string, body AddProviderAccountsJSONRequestBody) (*AddProviderAccountsResponse, error) {
	rsp, err := c.AddProviderAccounts(ctx, providerShortName, body)
	if err != nil {
		return nil, err
	}
	return ParseAddProviderAccountsResponse(rsp)
}

// VerifyProviderAccountWithBodyWithResponse request with arbitrary body returning *VerifyProviderAccountResponse
func (c *ClientWithResponses) VerifyProviderAccountWithBodyWithResponse(ctx context.Context, providerShortName string, accountID string, contentType string, body io.Reader) (*VerifyProviderAccountResponse, error) {
	rsp, err := c.VerifyProviderAccountWithBody(ctx, providerShortName, accountID, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseVerifyProviderAccountResponse(rsp)
}

func (c *ClientWithResponses) VerifyProviderAccountWithResponse(ctx context.Context, providerShortName string, accountID string, body VerifyProviderAccountJSONRequestBody) (*VerifyProviderAccountResponse, error) {
	rsp, err := c.VerifyProviderAccount(ctx, providerShortName, accountID, body)
	if err != nil {
		return nil, err
	}
	return ParseVerifyProviderAccountResponse(rsp)
}

// EnableGoldImagesWithBodyWithResponse request with arbitrary body returning *EnableGoldImagesResponse
func (c *ClientWithResponses) EnableGoldImagesWithBodyWithResponse(ctx context.Context, providerShortName string, contentType string, body io.Reader) (*EnableGoldImagesResponse, error) {
	rsp, err := c.EnableGoldImagesWithBody(ctx, providerShortName, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseEnableGoldImagesResponse(rsp)
}

func (c *ClientWithResponses) EnableGoldImagesWithResponse(ctx context.Context, providerShortName string, body EnableGoldImagesJSONRequestBody) (*EnableGoldImagesResponse, error) {
	rsp, err := c.EnableGoldImages(ctx, providerShortName, body)
	if err != nil {
		return nil, err
	}
	return ParseEnableGoldImagesResponse(rsp)
}

// ListErrataWithResponse request returning *ListErrataResponse
func (c *ClientWithResponses) ListErrataWithResponse(ctx context.Context, params *ListErrataParams) (*ListErrataResponse, error) {
	rsp, err := c.ListErrata(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseListErrataResponse(rsp)
}

// ListErrataByContentSetArchWithResponse request returning *ListErrataByContentSetArchResponse
func (c *ClientWithResponses) ListErrataByContentSetArchWithResponse(ctx context.Context, contentSet string, arch string, params *ListErrataByContentSetArchParams) (*ListErrataByContentSetArchResponse, error) {
	rsp, err := c.ListErrataByContentSetArch(ctx, contentSet, arch, params)
	if err != nil {
		return nil, err
	}
	return ParseListErrataByContentSetArchResponse(rsp)
}

// ShowErratumWithResponse request returning *ShowErratumResponse
func (c *ClientWithResponses) ShowErratumWithResponse(ctx context.Context, advisoryID string) (*ShowErratumResponse, error) {
	rsp, err := c.ShowErratum(ctx, advisoryID)
	if err != nil {
		return nil, err
	}
	return ParseShowErratumResponse(rsp)
}

// ListErratumPackagesWithResponse request returning *ListErratumPackagesResponse
func (c *ClientWithResponses) ListErratumPackagesWithResponse(ctx context.Context, advisoryID string, params *ListErratumPackagesParams) (*ListErratumPackagesResponse, error) {
	rsp, err := c.ListErratumPackages(ctx, advisoryID, params)
	if err != nil {
		return nil, err
	}
	return ParseListErratumPackagesResponse(rsp)
}

// ListErratumSystemsWithResponse request returning *ListErratumSystemsResponse
func (c *ClientWithResponses) ListErratumSystemsWithResponse(ctx context.Context, advisoryID string, params *ListErratumSystemsParams) (*ListErratumSystemsResponse, error) {
	rsp, err := c.ListErratumSystems(ctx, advisoryID, params)
	if err != nil {
		return nil, err
	}
	return ParseListErratumSystemsResponse(rsp)
}

// ListImagesByContentSetWithResponse request returning *ListImagesByContentSetResponse
func (c *ClientWithResponses) ListImagesByContentSetWithResponse(ctx context.Context, contentSet string, params *ListImagesByContentSetParams) (*ListImagesByContentSetResponse, error) {
	rsp, err := c.ListImagesByContentSet(ctx, contentSet, params)
	if err != nil {
		return nil, err
	}
	return ParseListImagesByContentSetResponse(rsp)
}

// DownloadImageWithResponse request returning *DownloadImageResponse
func (c *ClientWithResponses) DownloadImageWithResponse(ctx context.Context, checksum string) (*DownloadImageResponse, error) {
	rsp, err := c.DownloadImage(ctx, checksum)
	if err != nil {
		return nil, err
	}
	return ParseDownloadImageResponse(rsp)
}

// ListPackagesByContentSetArchWithResponse request returning *ListPackagesByContentSetArchResponse
func (c *ClientWithResponses) ListPackagesByContentSetArchWithResponse(ctx context.Context, contentSet string, arch string, params *ListPackagesByContentSetArchParams) (*ListPackagesByContentSetArchResponse, error) {
	rsp, err := c.ListPackagesByContentSetArch(ctx, contentSet, arch, params)
	if err != nil {
		return nil, err
	}
	return ParseListPackagesByContentSetArchResponse(rsp)
}

// ShowPackageWithResponse request returning *ShowPackageResponse
func (c *ClientWithResponses) ShowPackageWithResponse(ctx context.Context, checksum string) (*ShowPackageResponse, error) {
	rsp, err := c.ShowPackage(ctx, checksum)
	if err != nil {
		return nil, err
	}
	return ParseShowPackageResponse(rsp)
}

// DownloadPackageWithResponse request returning *DownloadPackageResponse
func (c *ClientWithResponses) DownloadPackageWithResponse(ctx context.Context, checksum string) (*DownloadPackageResponse, error) {
	rsp, err := c.DownloadPackage(ctx, checksum)
	if err != nil {
		return nil, err
	}
	return ParseDownloadPackageResponse(rsp)
}

// ListSubscriptionsWithResponse request returning *ListSubscriptionsResponse
func (c *ClientWithResponses) ListSubscriptionsWithResponse(ctx context.Context, params *ListSubscriptionsParams) (*ListSubscriptionsResponse, error) {
	rsp, err := c.ListSubscriptions(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseListSubscriptionsResponse(rsp)
}

// ListSubContentSetsWithResponse request returning *ListSubContentSetsResponse
func (c *ClientWithResponses) ListSubContentSetsWithResponse(ctx context.Context, subscriptionNumber string, params *ListSubContentSetsParams) (*ListSubContentSetsResponse, error) {
	rsp, err := c.ListSubContentSets(ctx, subscriptionNumber, params)
	if err != nil {
		return nil, err
	}
	return ParseListSubContentSetsResponse(rsp)
}

// ListSubSystemsWithResponse request returning *ListSubSystemsResponse
func (c *ClientWithResponses) ListSubSystemsWithResponse(ctx context.Context, subscriptionNumber string, params *ListSubSystemsParams) (*ListSubSystemsResponse, error) {
	rsp, err := c.ListSubSystems(ctx, subscriptionNumber, params)
	if err != nil {
		return nil, err
	}
	return ParseListSubSystemsResponse(rsp)
}

// ListSystemsWithResponse request returning *ListSystemsResponse
func (c *ClientWithResponses) ListSystemsWithResponse(ctx context.Context, params *ListSystemsParams) (*ListSystemsResponse, error) {
	rsp, err := c.ListSystems(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseListSystemsResponse(rsp)
}

// RemoveSystemWithResponse request returning *RemoveSystemResponse
func (c *ClientWithResponses) RemoveSystemWithResponse(ctx context.Context, systemUUID string) (*RemoveSystemResponse, error) {
	rsp, err := c.RemoveSystem(ctx, systemUUID)
	if err != nil {
		return nil, err
	}
	return ParseRemoveSystemResponse(rsp)
}

// ShowSystemWithResponse request returning *ShowSystemResponse
func (c *ClientWithResponses) ShowSystemWithResponse(ctx context.Context, systemUUID string, params *ShowSystemParams) (*ShowSystemResponse, error) {
	rsp, err := c.ShowSystem(ctx, systemUUID, params)
	if err != nil {
		return nil, err
	}
	return ParseShowSystemResponse(rsp)
}

// AttachEntitlementWithResponse request returning *AttachEntitlementResponse
func (c *ClientWithResponses) AttachEntitlementWithResponse(ctx context.Context, systemUUID string, params *AttachEntitlementParams) (*AttachEntitlementResponse, error) {
	rsp, err := c.AttachEntitlement(ctx, systemUUID, params)
	if err != nil {
		return nil, err
	}
	return ParseAttachEntitlementResponse(rsp)
}

// ListSystemErrataWithResponse request returning *ListSystemErrataResponse
func (c *ClientWithResponses) ListSystemErrataWithResponse(ctx context.Context, systemUUID string, params *ListSystemErrataParams) (*ListSystemErrataResponse, error) {
	rsp, err := c.ListSystemErrata(ctx, systemUUID, params)
	if err != nil {
		return nil, err
	}
	return ParseListSystemErrataResponse(rsp)
}

// ListSystemPackagesWithResponse request returning *ListSystemPackagesResponse
func (c *ClientWithResponses) ListSystemPackagesWithResponse(ctx context.Context, systemUUID string, params *ListSystemPackagesParams) (*ListSystemPackagesResponse, error) {
	rsp, err := c.ListSystemPackages(ctx, systemUUID, params)
	if err != nil {
		return nil, err
	}
	return ParseListSystemPackagesResponse(rsp)
}

// ListSystemPoolsWithResponse request returning *ListSystemPoolsResponse
func (c *ClientWithResponses) ListSystemPoolsWithResponse(ctx context.Context, systemUUID string, params *ListSystemPoolsParams) (*ListSystemPoolsResponse, error) {
	rsp, err := c.ListSystemPools(ctx, systemUUID, params)
	if err != nil {
		return nil, err
	}
	return ParseListSystemPoolsResponse(rsp)
}

// RemoveSystemEntitlementWithResponse request returning *RemoveSystemEntitlementResponse
func (c *ClientWithResponses) RemoveSystemEntitlementWithResponse(ctx context.Context, systemUUID string, entitlementID string) (*RemoveSystemEntitlementResponse, error) {
	rsp, err := c.RemoveSystemEntitlement(ctx, systemUUID, entitlementID)
	if err != nil {
		return nil, err
	}
	return ParseRemoveSystemEntitlementResponse(rsp)
}

// ParseListAllocationsResponse parses an HTTP response from a ListAllocationsWithResponse call
func ParseListAllocationsResponse(rsp *http.Response) (*ListAllocationsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ListAllocationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Body *[]Allocation `json:"body,omitempty"`

			// APIPageParam details the pagination parameters in APIResponse
			Pagination *APIPageParam `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {

			// ErrorDetails details the Error in ErrorResponse
			Error *ErrorDetails `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {

			// ErrorDetails details the Error in ErrorResponse
			Error *ErrorDetails `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {

			// ErrorDetails details the Error in ErrorResponse
			Error *ErrorDetails `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {

			// ErrorDetails details the Error in ErrorResponse
			Error *ErrorDetails `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {

			// ErrorDetails details the Error in ErrorResponse
			Error *ErrorDetails `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseCreateSatelliteResponse parses an HTTP response from a CreateSatelliteWithResponse call
func ParseCreateSatelliteResponse(rsp *http.Response) (*CreateSatelliteResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateSatelliteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {

			// details of a subscription allocation
			Body *AllocationDetails `json:"body,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {

			// ErrorDetails details the Error in ErrorResponse
			Error *ErrorDetails `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {

			// ErrorDetails details the Error in ErrorResponse
			Error *ErrorDetails `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {

			// ErrorDetails details the Error in ErrorResponse
			Error *ErrorDetails `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {

			// ErrorDetails details the Error in ErrorResponse
			Error *ErrorDetails `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {

			// ErrorDetails details the Error in ErrorResponse
			Error *ErrorDetails `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseRemoveAllocationResponse parses an HTTP response from a RemoveAllocationWithResponse call
func ParseRemoveAllocationResponse(rsp *http.Response) (*RemoveAllocationResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &RemoveAllocationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {

			// ErrorDetails details the Error in ErrorResponse
			Error *ErrorDetails `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {

			// ErrorDetails details the Error in ErrorResponse
			Error *ErrorDetails `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {

			// ErrorDetails details the Error in ErrorResponse
			Error *ErrorDetails `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {

			// ErrorDetails details the Error in ErrorResponse
			Error *ErrorDetails `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {

			// ErrorDetails details the Error in ErrorResponse
			Error *ErrorDetails `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest struct {

			// ErrorDetails details the Error in ErrorResponse
			Error *ErrorDetails `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseShowAllocationResponse parses an HTTP response from a ShowAllocationWithResponse call
func ParseShowAllocationResponse(rsp *http.Response) (*ShowAllocationResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ShowAllocationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {

			// details of a subscription allocation
			Body *AllocationDetails `json:"body,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {

			// ErrorDetails details the Error in ErrorResponse
			Error *ErrorDetails `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {

			// ErrorDetails details the Error in ErrorResponse
			Error *ErrorDetails `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {

			// ErrorDetails details the Error in ErrorResponse
			Error *ErrorDetails `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {

			// ErrorDetails details the Error in ErrorResponse
			Error *ErrorDetails `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {

			// ErrorDetails details the Error in ErrorResponse
			Error *ErrorDetails `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseAttachEntitlementAllocationResponse parses an HTTP response from a AttachEntitlementAllocationWithResponse call
func ParseAttachEntitlementAllocationResponse(rsp *http.Response) (*AttachEntitlementAllocationResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &AttachEntitlementAllocationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {

			// details of a subscription allocation
			Body *AllocationDetails `json:"body,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {

			// ErrorDetails details the Error in ErrorResponse
			Error *ErrorDetails `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {

			// ErrorDetails details the Error in ErrorResponse
			Error *ErrorDetails `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {

			// ErrorDetails details the Error in ErrorResponse
			Error *ErrorDetails `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {

			// ErrorDetails details the Error in ErrorResponse
			Error *ErrorDetails `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {

			// ErrorDetails details the Error in ErrorResponse
			Error *ErrorDetails `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseUpdateEntitlementAllocationResponse parses an HTTP response from a UpdateEntitlementAllocationWithResponse call
func ParseUpdateEntitlementAllocationResponse(rsp *http.Response) (*UpdateEntitlementAllocationResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UpdateEntitlementAllocationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {

			// details of a subscription allocation
			Body *AllocationDetails `json:"body,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {

			// ErrorDetails details the Error in ErrorResponse
			Error *ErrorDetails `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {

			// ErrorDetails details the Error in ErrorResponse
			Error *ErrorDetails `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {

			// ErrorDetails details the Error in ErrorResponse
			Error *ErrorDetails `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {

			// ErrorDetails details the Error in ErrorResponse
			Error *ErrorDetails `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {

			// ErrorDetails details the Error in ErrorResponse
			Error *ErrorDetails `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseExportAllocationResponse parses an HTTP response from a ExportAllocationWithResponse call
func ParseExportAllocationResponse(rsp *http.Response) (*ExportAllocationResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ExportAllocationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Body *ExportResponse `json:"body,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {

			// ErrorDetails details the Error in ErrorResponse
			Error *ErrorDetails `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {

			// ErrorDetails details the Error in ErrorResponse
			Error *ErrorDetails `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {

			// ErrorDetails details the Error in ErrorResponse
			Error *ErrorDetails `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {

			// ErrorDetails details the Error in ErrorResponse
			Error *ErrorDetails `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {

			// ErrorDetails details the Error in ErrorResponse
			Error *ErrorDetails `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetExportAllocationResponse parses an HTTP response from a GetExportAllocationWithResponse call
func ParseGetExportAllocationResponse(rsp *http.Response) (*GetExportAllocationResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetExportAllocationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseExportJobAllocationResponse parses an HTTP response from a ExportJobAllocationWithResponse call
func ParseExportJobAllocationResponse(rsp *http.Response) (*ExportJobAllocationResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ExportJobAllocationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Body *ExportJobResponse `json:"body,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest struct {
			Body *OngoingExportJobResponse `json:"body,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {

			// ErrorDetails details the Error in ErrorResponse
			Error *ErrorDetails `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {

			// ErrorDetails details the Error in ErrorResponse
			Error *ErrorDetails `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {

			// ErrorDetails details the Error in ErrorResponse
			Error *ErrorDetails `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {

			// ErrorDetails details the Error in ErrorResponse
			Error *ErrorDetails `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest struct {

			// ErrorDetails details the Error in ErrorResponse
			Error *ErrorDetails `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {

			// ErrorDetails details the Error in ErrorResponse
			Error *ErrorDetails `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseListAllocationPoolsResponse parses an HTTP response from a ListAllocationPoolsWithResponse call
func ParseListAllocationPoolsResponse(rsp *http.Response) (*ListAllocationPoolsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ListAllocationPoolsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PoolsListMock
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {

			// ErrorDetails details the Error in ErrorResponse
			Error *ErrorDetails `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {

			// ErrorDetails details the Error in ErrorResponse
			Error *ErrorDetails `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {

			// ErrorDetails details the Error in ErrorResponse
			Error *ErrorDetails `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {

			// ErrorDetails details the Error in ErrorResponse
			Error *ErrorDetails `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {

			// ErrorDetails details the Error in ErrorResponse
			Error *ErrorDetails `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseRemoveAllocationEntitlementResponse parses an HTTP response from a RemoveAllocationEntitlementWithResponse call
func ParseRemoveAllocationEntitlementResponse(rsp *http.Response) (*RemoveAllocationEntitlementResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &RemoveAllocationEntitlementResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {

			// ErrorDetails details the Error in ErrorResponse
			Error *ErrorDetails `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {

			// ErrorDetails details the Error in ErrorResponse
			Error *ErrorDetails `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {

			// ErrorDetails details the Error in ErrorResponse
			Error *ErrorDetails `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {

			// ErrorDetails details the Error in ErrorResponse
			Error *ErrorDetails `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {

			// ErrorDetails details the Error in ErrorResponse
			Error *ErrorDetails `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseListEnabledCloudAccessProvidersResponse parses an HTTP response from a ListEnabledCloudAccessProvidersWithResponse call
func ParseListEnabledCloudAccessProvidersResponse(rsp *http.Response) (*ListEnabledCloudAccessProvidersResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ListEnabledCloudAccessProvidersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Body *[]EnabledCloudAccessProvider `json:"body,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {

			// ErrorDetails details the Error in ErrorResponse
			Error *ErrorDetails `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {

			// ErrorDetails details the Error in ErrorResponse
			Error *ErrorDetails `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {

			// ErrorDetails details the Error in ErrorResponse
			Error *ErrorDetails `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {

			// ErrorDetails details the Error in ErrorResponse
			Error *ErrorDetails `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {

			// ErrorDetails details the Error in ErrorResponse
			Error *ErrorDetails `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseUpdateProviderAccountResponse parses an HTTP response from a UpdateProviderAccountWithResponse call
func ParseUpdateProviderAccountResponse(rsp *http.Response) (*UpdateProviderAccountResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UpdateProviderAccountResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {

			// ErrorDetails details the Error in ErrorResponse
			Error *ErrorDetails `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {

			// ErrorDetails details the Error in ErrorResponse
			Error *ErrorDetails `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {

			// ErrorDetails details the Error in ErrorResponse
			Error *ErrorDetails `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {

			// ErrorDetails details the Error in ErrorResponse
			Error *ErrorDetails `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {

			// ErrorDetails details the Error in ErrorResponse
			Error *ErrorDetails `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseRemoveProviderAccountResponse parses an HTTP response from a RemoveProviderAccountWithResponse call
func ParseRemoveProviderAccountResponse(rsp *http.Response) (*RemoveProviderAccountResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &RemoveProviderAccountResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {

			// ErrorDetails details the Error in ErrorResponse
			Error *ErrorDetails `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {

			// ErrorDetails details the Error in ErrorResponse
			Error *ErrorDetails `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {

			// ErrorDetails details the Error in ErrorResponse
			Error *ErrorDetails `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {

			// ErrorDetails details the Error in ErrorResponse
			Error *ErrorDetails `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {

			// ErrorDetails details the Error in ErrorResponse
			Error *ErrorDetails `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseAddProviderAccountsResponse parses an HTTP response from a AddProviderAccountsWithResponse call
func ParseAddProviderAccountsResponse(rsp *http.Response) (*AddProviderAccountsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &AddProviderAccountsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {

			// ErrorDetails details the Error in ErrorResponse
			Error *ErrorDetails `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {

			// ErrorDetails details the Error in ErrorResponse
			Error *ErrorDetails `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {

			// ErrorDetails details the Error in ErrorResponse
			Error *ErrorDetails `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {

			// ErrorDetails details the Error in ErrorResponse
			Error *ErrorDetails `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {

			// ErrorDetails details the Error in ErrorResponse
			Error *ErrorDetails `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseVerifyProviderAccountResponse parses an HTTP response from a VerifyProviderAccountWithResponse call
func ParseVerifyProviderAccountResponse(rsp *http.Response) (*VerifyProviderAccountResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &VerifyProviderAccountResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {

			// ErrorDetails details the Error in ErrorResponse
			Error *ErrorDetails `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {

			// ErrorDetails details the Error in ErrorResponse
			Error *ErrorDetails `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {

			// ErrorDetails details the Error in ErrorResponse
			Error *ErrorDetails `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {

			// ErrorDetails details the Error in ErrorResponse
			Error *ErrorDetails `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {

			// ErrorDetails details the Error in ErrorResponse
			Error *ErrorDetails `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseEnableGoldImagesResponse parses an HTTP response from a EnableGoldImagesWithResponse call
func ParseEnableGoldImagesResponse(rsp *http.Response) (*EnableGoldImagesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &EnableGoldImagesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {

			// ErrorDetails details the Error in ErrorResponse
			Error *ErrorDetails `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {

			// ErrorDetails details the Error in ErrorResponse
			Error *ErrorDetails `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {

			// ErrorDetails details the Error in ErrorResponse
			Error *ErrorDetails `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {

			// ErrorDetails details the Error in ErrorResponse
			Error *ErrorDetails `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {

			// ErrorDetails details the Error in ErrorResponse
			Error *ErrorDetails `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseListErrataResponse parses an HTTP response from a ListErrataWithResponse call
func ParseListErrataResponse(rsp *http.Response) (*ListErrataResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ListErrataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MyErrataListMock
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {

			// ErrorDetails details the Error in ErrorResponse
			Error *ErrorDetails `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {

			// ErrorDetails details the Error in ErrorResponse
			Error *ErrorDetails `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {

			// ErrorDetails details the Error in ErrorResponse
			Error *ErrorDetails `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {

			// ErrorDetails details the Error in ErrorResponse
			Error *ErrorDetails `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {

			// ErrorDetails details the Error in ErrorResponse
			Error *ErrorDetails `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseListErrataByContentSetArchResponse parses an HTTP response from a ListErrataByContentSetArchWithResponse call
func ParseListErrataByContentSetArchResponse(rsp *http.Response) (*ListErrataByContentSetArchResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ListErrataByContentSetArchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ContentSetArchMock
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {

			// ErrorDetails details the Error in ErrorResponse
			Error *ErrorDetails `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {

			// ErrorDetails details the Error in ErrorResponse
			Error *ErrorDetails `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {

			// ErrorDetails details the Error in ErrorResponse
			Error *ErrorDetails `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {

			// ErrorDetails details the Error in ErrorResponse
			Error *ErrorDetails `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {

			// ErrorDetails details the Error in ErrorResponse
			Error *ErrorDetails `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseShowErratumResponse parses an HTTP response from a ShowErratumWithResponse call
func ParseShowErratumResponse(rsp *http.Response) (*ShowErratumResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ShowErratumResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Body *ErratumDetails `json:"body,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {

			// ErrorDetails details the Error in ErrorResponse
			Error *ErrorDetails `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {

			// ErrorDetails details the Error in ErrorResponse
			Error *ErrorDetails `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {

			// ErrorDetails details the Error in ErrorResponse
			Error *ErrorDetails `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {

			// ErrorDetails details the Error in ErrorResponse
			Error *ErrorDetails `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {

			// ErrorDetails details the Error in ErrorResponse
			Error *ErrorDetails `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseListErratumPackagesResponse parses an HTTP response from a ListErratumPackagesWithResponse call
func ParseListErratumPackagesResponse(rsp *http.Response) (*ListErratumPackagesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ListErratumPackagesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PkgListMock
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {

			// ErrorDetails details the Error in ErrorResponse
			Error *ErrorDetails `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {

			// ErrorDetails details the Error in ErrorResponse
			Error *ErrorDetails `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {

			// ErrorDetails details the Error in ErrorResponse
			Error *ErrorDetails `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {

			// ErrorDetails details the Error in ErrorResponse
			Error *ErrorDetails `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {

			// ErrorDetails details the Error in ErrorResponse
			Error *ErrorDetails `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseListErratumSystemsResponse parses an HTTP response from a ListErratumSystemsWithResponse call
func ParseListErratumSystemsResponse(rsp *http.Response) (*ListErratumSystemsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ListErratumSystemsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SystemListMock
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {

			// ErrorDetails details the Error in ErrorResponse
			Error *ErrorDetails `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {

			// ErrorDetails details the Error in ErrorResponse
			Error *ErrorDetails `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {

			// ErrorDetails details the Error in ErrorResponse
			Error *ErrorDetails `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {

			// ErrorDetails details the Error in ErrorResponse
			Error *ErrorDetails `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {

			// ErrorDetails details the Error in ErrorResponse
			Error *ErrorDetails `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseListImagesByContentSetResponse parses an HTTP response from a ListImagesByContentSetWithResponse call
func ParseListImagesByContentSetResponse(rsp *http.Response) (*ListImagesByContentSetResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ListImagesByContentSetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Body *[]ImageInContentSet `json:"body,omitempty"`

			// APIPageParam details the pagination parameters in APIResponse
			Pagination *APIPageParam `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {

			// ErrorDetails details the Error in ErrorResponse
			Error *ErrorDetails `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {

			// ErrorDetails details the Error in ErrorResponse
			Error *ErrorDetails `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {

			// ErrorDetails details the Error in ErrorResponse
			Error *ErrorDetails `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {

			// ErrorDetails details the Error in ErrorResponse
			Error *ErrorDetails `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {

			// ErrorDetails details the Error in ErrorResponse
			Error *ErrorDetails `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDownloadImageResponse parses an HTTP response from a DownloadImageWithResponse call
func ParseDownloadImageResponse(rsp *http.Response) (*DownloadImageResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DownloadImageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 307:
		var dest struct {
			Body *DownloadLink `json:"body,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON307 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {

			// ErrorDetails details the Error in ErrorResponse
			Error *ErrorDetails `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {

			// ErrorDetails details the Error in ErrorResponse
			Error *ErrorDetails `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {

			// ErrorDetails details the Error in ErrorResponse
			Error *ErrorDetails `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {

			// ErrorDetails details the Error in ErrorResponse
			Error *ErrorDetails `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {

			// ErrorDetails details the Error in ErrorResponse
			Error *ErrorDetails `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseListPackagesByContentSetArchResponse parses an HTTP response from a ListPackagesByContentSetArchWithResponse call
func ParseListPackagesByContentSetArchResponse(rsp *http.Response) (*ListPackagesByContentSetArchResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ListPackagesByContentSetArchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Body *[]PkgContentSetArch `json:"body,omitempty"`

			// APIPageParam details the pagination parameters in APIResponse
			Pagination *APIPageParam `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {

			// ErrorDetails details the Error in ErrorResponse
			Error *ErrorDetails `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {

			// ErrorDetails details the Error in ErrorResponse
			Error *ErrorDetails `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {

			// ErrorDetails details the Error in ErrorResponse
			Error *ErrorDetails `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {

			// ErrorDetails details the Error in ErrorResponse
			Error *ErrorDetails `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {

			// ErrorDetails details the Error in ErrorResponse
			Error *ErrorDetails `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseShowPackageResponse parses an HTTP response from a ShowPackageWithResponse call
func ParseShowPackageResponse(rsp *http.Response) (*ShowPackageResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ShowPackageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Body *PkgDetails `json:"body,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {

			// ErrorDetails details the Error in ErrorResponse
			Error *ErrorDetails `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {

			// ErrorDetails details the Error in ErrorResponse
			Error *ErrorDetails `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {

			// ErrorDetails details the Error in ErrorResponse
			Error *ErrorDetails `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {

			// ErrorDetails details the Error in ErrorResponse
			Error *ErrorDetails `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {

			// ErrorDetails details the Error in ErrorResponse
			Error *ErrorDetails `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDownloadPackageResponse parses an HTTP response from a DownloadPackageWithResponse call
func ParseDownloadPackageResponse(rsp *http.Response) (*DownloadPackageResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DownloadPackageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 307:
		var dest struct {
			Body *DownloadLink `json:"body,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON307 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {

			// ErrorDetails details the Error in ErrorResponse
			Error *ErrorDetails `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {

			// ErrorDetails details the Error in ErrorResponse
			Error *ErrorDetails `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {

			// ErrorDetails details the Error in ErrorResponse
			Error *ErrorDetails `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {

			// ErrorDetails details the Error in ErrorResponse
			Error *ErrorDetails `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {

			// ErrorDetails details the Error in ErrorResponse
			Error *ErrorDetails `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseListSubscriptionsResponse parses an HTTP response from a ListSubscriptionsWithResponse call
func ParseListSubscriptionsResponse(rsp *http.Response) (*ListSubscriptionsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ListSubscriptionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {

			// ListResponse is the actual collection of subscription details that gets
			// rendered
			Body *ListResponse `json:"body,omitempty"`

			// APIPageParam details the pagination parameters in APIResponse
			Pagination *APIPageParam `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {

			// ErrorDetails details the Error in ErrorResponse
			Error *ErrorDetails `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {

			// ErrorDetails details the Error in ErrorResponse
			Error *ErrorDetails `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {

			// ErrorDetails details the Error in ErrorResponse
			Error *ErrorDetails `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {

			// ErrorDetails details the Error in ErrorResponse
			Error *ErrorDetails `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {

			// ErrorDetails details the Error in ErrorResponse
			Error *ErrorDetails `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseListSubContentSetsResponse parses an HTTP response from a ListSubContentSetsWithResponse call
func ParseListSubContentSetsResponse(rsp *http.Response) (*ListSubContentSetsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ListSubContentSetsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Body *[]ContentSet `json:"body,omitempty"`

			// APIPageParam details the pagination parameters in APIResponse
			Pagination *APIPageParam `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {

			// ErrorDetails details the Error in ErrorResponse
			Error *ErrorDetails `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {

			// ErrorDetails details the Error in ErrorResponse
			Error *ErrorDetails `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {

			// ErrorDetails details the Error in ErrorResponse
			Error *ErrorDetails `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {

			// ErrorDetails details the Error in ErrorResponse
			Error *ErrorDetails `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {

			// ErrorDetails details the Error in ErrorResponse
			Error *ErrorDetails `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseListSubSystemsResponse parses an HTTP response from a ListSubSystemsWithResponse call
func ParseListSubSystemsResponse(rsp *http.Response) (*ListSubSystemsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ListSubSystemsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Body *[]SystemListSystem `json:"body,omitempty"`

			// APIPageParam details the pagination parameters in APIResponse
			Pagination *APIPageParam `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {

			// ErrorDetails details the Error in ErrorResponse
			Error *ErrorDetails `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {

			// ErrorDetails details the Error in ErrorResponse
			Error *ErrorDetails `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {

			// ErrorDetails details the Error in ErrorResponse
			Error *ErrorDetails `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {

			// ErrorDetails details the Error in ErrorResponse
			Error *ErrorDetails `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {

			// ErrorDetails details the Error in ErrorResponse
			Error *ErrorDetails `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseListSystemsResponse parses an HTTP response from a ListSystemsWithResponse call
func ParseListSystemsResponse(rsp *http.Response) (*ListSystemsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ListSystemsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {

			// systemList is a System Slice
			Body *SystemList `json:"body,omitempty"`

			// APIPageParam details the pagination parameters in APIResponse
			Pagination *APIPageParam `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {

			// ErrorDetails details the Error in ErrorResponse
			Error *ErrorDetails `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {

			// ErrorDetails details the Error in ErrorResponse
			Error *ErrorDetails `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {

			// ErrorDetails details the Error in ErrorResponse
			Error *ErrorDetails `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {

			// ErrorDetails details the Error in ErrorResponse
			Error *ErrorDetails `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {

			// ErrorDetails details the Error in ErrorResponse
			Error *ErrorDetails `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseRemoveSystemResponse parses an HTTP response from a RemoveSystemWithResponse call
func ParseRemoveSystemResponse(rsp *http.Response) (*RemoveSystemResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &RemoveSystemResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {

			// ErrorDetails details the Error in ErrorResponse
			Error *ErrorDetails `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {

			// ErrorDetails details the Error in ErrorResponse
			Error *ErrorDetails `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {

			// ErrorDetails details the Error in ErrorResponse
			Error *ErrorDetails `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {

			// ErrorDetails details the Error in ErrorResponse
			Error *ErrorDetails `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {

			// ErrorDetails details the Error in ErrorResponse
			Error *ErrorDetails `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest struct {

			// ErrorDetails details the Error in ErrorResponse
			Error *ErrorDetails `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseShowSystemResponse parses an HTTP response from a ShowSystemWithResponse call
func ParseShowSystemResponse(rsp *http.Response) (*ShowSystemResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ShowSystemResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Body *System `json:"body,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {

			// ErrorDetails details the Error in ErrorResponse
			Error *ErrorDetails `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {

			// ErrorDetails details the Error in ErrorResponse
			Error *ErrorDetails `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {

			// ErrorDetails details the Error in ErrorResponse
			Error *ErrorDetails `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {

			// ErrorDetails details the Error in ErrorResponse
			Error *ErrorDetails `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {

			// ErrorDetails details the Error in ErrorResponse
			Error *ErrorDetails `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseAttachEntitlementResponse parses an HTTP response from a AttachEntitlementWithResponse call
func ParseAttachEntitlementResponse(rsp *http.Response) (*AttachEntitlementResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &AttachEntitlementResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Body *System `json:"body,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {

			// ErrorDetails details the Error in ErrorResponse
			Error *ErrorDetails `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {

			// ErrorDetails details the Error in ErrorResponse
			Error *ErrorDetails `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {

			// ErrorDetails details the Error in ErrorResponse
			Error *ErrorDetails `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {

			// ErrorDetails details the Error in ErrorResponse
			Error *ErrorDetails `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {

			// ErrorDetails details the Error in ErrorResponse
			Error *ErrorDetails `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseListSystemErrataResponse parses an HTTP response from a ListSystemErrataWithResponse call
func ParseListSystemErrataResponse(rsp *http.Response) (*ListSystemErrataResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ListSystemErrataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Body *[]ErratumForSystem `json:"body,omitempty"`

			// APIPageParam details the pagination parameters in APIResponse
			Pagination *APIPageParam `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {

			// ErrorDetails details the Error in ErrorResponse
			Error *ErrorDetails `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {

			// ErrorDetails details the Error in ErrorResponse
			Error *ErrorDetails `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {

			// ErrorDetails details the Error in ErrorResponse
			Error *ErrorDetails `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {

			// ErrorDetails details the Error in ErrorResponse
			Error *ErrorDetails `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {

			// ErrorDetails details the Error in ErrorResponse
			Error *ErrorDetails `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseListSystemPackagesResponse parses an HTTP response from a ListSystemPackagesWithResponse call
func ParseListSystemPackagesResponse(rsp *http.Response) (*ListSystemPackagesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ListSystemPackagesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Body *[]PackageForSystem `json:"body,omitempty"`

			// APIPageParam details the pagination parameters in APIResponse
			Pagination *APIPageParam `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {

			// ErrorDetails details the Error in ErrorResponse
			Error *ErrorDetails `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {

			// ErrorDetails details the Error in ErrorResponse
			Error *ErrorDetails `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {

			// ErrorDetails details the Error in ErrorResponse
			Error *ErrorDetails `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {

			// ErrorDetails details the Error in ErrorResponse
			Error *ErrorDetails `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {

			// ErrorDetails details the Error in ErrorResponse
			Error *ErrorDetails `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseListSystemPoolsResponse parses an HTTP response from a ListSystemPoolsWithResponse call
func ParseListSystemPoolsResponse(rsp *http.Response) (*ListSystemPoolsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ListSystemPoolsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PoolsListMock
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {

			// ErrorDetails details the Error in ErrorResponse
			Error *ErrorDetails `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {

			// ErrorDetails details the Error in ErrorResponse
			Error *ErrorDetails `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {

			// ErrorDetails details the Error in ErrorResponse
			Error *ErrorDetails `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {

			// ErrorDetails details the Error in ErrorResponse
			Error *ErrorDetails `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {

			// ErrorDetails details the Error in ErrorResponse
			Error *ErrorDetails `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseRemoveSystemEntitlementResponse parses an HTTP response from a RemoveSystemEntitlementWithResponse call
func ParseRemoveSystemEntitlementResponse(rsp *http.Response) (*RemoveSystemEntitlementResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &RemoveSystemEntitlementResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {

			// ErrorDetails details the Error in ErrorResponse
			Error *ErrorDetails `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {

			// ErrorDetails details the Error in ErrorResponse
			Error *ErrorDetails `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {

			// ErrorDetails details the Error in ErrorResponse
			Error *ErrorDetails `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {

			// ErrorDetails details the Error in ErrorResponse
			Error *ErrorDetails `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {

			// ErrorDetails details the Error in ErrorResponse
			Error *ErrorDetails `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}
