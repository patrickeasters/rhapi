// Package sources provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package sources

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
)

const (
	UserSecurityScopes = "UserSecurity.Scopes"
)

// Application defines model for Application.
type Application struct {

	// ID of the resource
	ApplicationTypeId       *ID                     `json:"application_type_id,omitempty"`
	AvailabilityStatus      *string                 `json:"availability_status,omitempty"`
	AvailabilityStatusError *string                 `json:"availability_status_error,omitempty"`
	CreatedAt               *time.Time              `json:"created_at,omitempty"`
	Extra                   *map[string]interface{} `json:"extra,omitempty"`

	// ID of the resource
	Id              *ID        `json:"id,omitempty"`
	LastAvailableAt *time.Time `json:"last_available_at,omitempty"`
	LastCheckedAt   *time.Time `json:"last_checked_at,omitempty"`

	// ID of the resource
	SourceId  *ID        `json:"source_id,omitempty"`
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

// ApplicationAuthentication defines model for ApplicationAuthentication.
type ApplicationAuthentication struct {

	// ID of the resource
	ApplicationId *ID `json:"application_id,omitempty"`

	// ID of the resource
	AuthenticationId *ID        `json:"authentication_id,omitempty"`
	CreatedAt        *time.Time `json:"created_at,omitempty"`

	// ID of the resource
	Id        *ID        `json:"id,omitempty"`
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

// ApplicationAuthenticationsCollection defines model for ApplicationAuthenticationsCollection.
type ApplicationAuthenticationsCollection struct {
	Data  *[]ApplicationAuthentication `json:"data,omitempty"`
	Links *CollectionLinks             `json:"links,omitempty"`
	Meta  *CollectionMetadata          `json:"meta,omitempty"`
}

// ApplicationType defines model for ApplicationType.
type ApplicationType struct {
	CreatedAt             *time.Time              `json:"created_at,omitempty"`
	DependentApplications *map[string]interface{} `json:"dependent_applications,omitempty"`
	DisplayName           *string                 `json:"display_name,omitempty"`

	// ID of the resource
	Id                           *ID                     `json:"id,omitempty"`
	Name                         *string                 `json:"name,omitempty"`
	SupportedAuthenticationTypes *map[string]interface{} `json:"supported_authentication_types,omitempty"`
	SupportedSourceTypes         *map[string]interface{} `json:"supported_source_types,omitempty"`
	UpdatedAt                    *time.Time              `json:"updated_at,omitempty"`
}

// ApplicationTypesCollection defines model for ApplicationTypesCollection.
type ApplicationTypesCollection struct {
	Data  *[]ApplicationType  `json:"data,omitempty"`
	Links *CollectionLinks    `json:"links,omitempty"`
	Meta  *CollectionMetadata `json:"meta,omitempty"`
}

// ApplicationsCollection defines model for ApplicationsCollection.
type ApplicationsCollection struct {
	Data  *[]Application      `json:"data,omitempty"`
	Links *CollectionLinks    `json:"links,omitempty"`
	Meta  *CollectionMetadata `json:"meta,omitempty"`
}

// Authentication defines model for Authentication.
type Authentication struct {
	Authtype                *string `json:"authtype,omitempty"`
	AvailabilityStatus      *string `json:"availability_status,omitempty"`
	AvailabilityStatusError *string `json:"availability_status_error,omitempty"`
	Extra                   *struct {
		Azure *struct {
			TenantId *string `json:"tenant_id,omitempty"`
		} `json:"azure,omitempty"`
	} `json:"extra,omitempty"`

	// ID of the resource
	Id              *ID        `json:"id,omitempty"`
	LastAvailableAt *time.Time `json:"last_available_at,omitempty"`
	LastCheckedAt   *time.Time `json:"last_checked_at,omitempty"`
	Name            *string    `json:"name,omitempty"`
	Password        *string    `json:"password,omitempty"`

	// ID of the resource
	ResourceId   *ID     `json:"resource_id,omitempty"`
	ResourceType *string `json:"resource_type,omitempty"`

	// ID of the resource
	SourceId      *ID     `json:"source_id,omitempty"`
	Status        *string `json:"status,omitempty"`
	StatusDetails *string `json:"status_details,omitempty"`
	Username      *string `json:"username,omitempty"`
}

// AuthenticationsCollection defines model for AuthenticationsCollection.
type AuthenticationsCollection struct {
	Data  *[]Authentication   `json:"data,omitempty"`
	Links *CollectionLinks    `json:"links,omitempty"`
	Meta  *CollectionMetadata `json:"meta,omitempty"`
}

// CollectionLinks defines model for CollectionLinks.
type CollectionLinks struct {
	First *string `json:"first,omitempty"`
	Last  *string `json:"last,omitempty"`
	Next  *string `json:"next,omitempty"`
	Prev  *string `json:"prev,omitempty"`
}

// CollectionMetadata defines model for CollectionMetadata.
type CollectionMetadata struct {
	Count  *int `json:"count,omitempty"`
	Limit  *int `json:"limit,omitempty"`
	Offset *int `json:"offset,omitempty"`
}

// Endpoint defines model for Endpoint.
type Endpoint struct {
	AvailabilityStatus      *string `json:"availability_status,omitempty"`
	AvailabilityStatusError *string `json:"availability_status_error,omitempty"`

	// Optional X.509 Certificate Authority
	CertificateAuthority *string    `json:"certificate_authority,omitempty"`
	CreatedAt            *time.Time `json:"created_at,omitempty"`
	Default              *bool      `json:"default,omitempty"`

	// URI host component
	Host *string `json:"host,omitempty"`

	// ID of the resource
	Id              *ID        `json:"id,omitempty"`
	LastAvailableAt *time.Time `json:"last_available_at,omitempty"`
	LastCheckedAt   *time.Time `json:"last_checked_at,omitempty"`

	// URI path component
	Path *string `json:"path,omitempty"`

	// URI port component
	Port *int `json:"port,omitempty"`

	// Identifier of a receptor node
	ReceptorNode *string `json:"receptor_node,omitempty"`
	Role         *string `json:"role,omitempty"`

	// URI scheme component
	Scheme *string `json:"scheme,omitempty"`

	// ID of the resource
	SourceId  *ID        `json:"source_id,omitempty"`
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// Should SSL be verified
	VerifySsl *bool `json:"verify_ssl,omitempty"`
}

// EndpointsCollection defines model for EndpointsCollection.
type EndpointsCollection struct {
	Data  *[]Endpoint         `json:"data,omitempty"`
	Links *CollectionLinks    `json:"links,omitempty"`
	Meta  *CollectionMetadata `json:"meta,omitempty"`
}

// ErrorNotFound defines model for ErrorNotFound.
type ErrorNotFound struct {
	Errors *[]struct {
		Detail *string `json:"detail,omitempty"`
		Status *string `json:"status,omitempty"`
	} `json:"errors,omitempty"`
}

// GraphQLRequest defines model for GraphQLRequest.
type GraphQLRequest struct {

	// If the Query contains several named operations, the operationName controls which one should be executed
	OperationName *string `json:"operationName,omitempty"`

	// The GraphQL query
	Query string `json:"query"`

	// Optional Query variables
	Variables *map[string]interface{} `json:"variables"`
}

// GraphQLResponse defines model for GraphQLResponse.
type GraphQLResponse struct {

	// Results from the GraphQL query
	Data *map[string]interface{} `json:"data,omitempty"`

	// Errors resulting from the GraphQL query
	Errors *[]map[string]interface{} `json:"errors,omitempty"`
}

// ID defines model for ID.
type ID string

// Source defines model for Source.
type Source struct {
	AvailabilityStatus *string    `json:"availability_status,omitempty"`
	CreatedAt          *time.Time `json:"created_at,omitempty"`

	// ID of the resource
	Id              *ID        `json:"id,omitempty"`
	Imported        *string    `json:"imported,omitempty"`
	LastAvailableAt *time.Time `json:"last_available_at,omitempty"`
	LastCheckedAt   *time.Time `json:"last_checked_at,omitempty"`
	Name            *string    `json:"name,omitempty"`
	SourceRef       *string    `json:"source_ref,omitempty"`

	// ID of the resource
	SourceTypeId *ID        `json:"source_type_id,omitempty"`
	Uid          *string    `json:"uid,omitempty"`
	UpdatedAt    *time.Time `json:"updated_at,omitempty"`
	Version      *string    `json:"version,omitempty"`
}

// SourceType defines model for SourceType.
type SourceType struct {
	CreatedAt *time.Time `json:"created_at,omitempty"`
	IconUrl   *string    `json:"icon_url,omitempty"`

	// ID of the resource
	Id          *ID        `json:"id,omitempty"`
	Name        *string    `json:"name,omitempty"`
	ProductName *string    `json:"product_name,omitempty"`
	Schema      *string    `json:"schema,omitempty"`
	UpdatedAt   *time.Time `json:"updated_at,omitempty"`
	Vendor      *string    `json:"vendor,omitempty"`
}

// SourceTypesCollection defines model for SourceTypesCollection.
type SourceTypesCollection struct {
	Data  *[]SourceType       `json:"data,omitempty"`
	Links *CollectionLinks    `json:"links,omitempty"`
	Meta  *CollectionMetadata `json:"meta,omitempty"`
}

// SourcesCollection defines model for SourcesCollection.
type SourcesCollection struct {
	Data  *[]Source           `json:"data,omitempty"`
	Links *CollectionLinks    `json:"links,omitempty"`
	Meta  *CollectionMetadata `json:"meta,omitempty"`
}

// QueryFilter defines model for QueryFilter.
type QueryFilter map[string]interface{}

// QueryLimit defines model for QueryLimit.
type QueryLimit int

// QueryOffset defines model for QueryOffset.
type QueryOffset int

// QuerySortBy defines model for QuerySortBy.
type QuerySortBy map[string]interface{}

// ListAllApplicationAuthenticationsParams defines parameters for ListAllApplicationAuthentications.
type ListAllApplicationAuthenticationsParams struct {

	// The numbers of items to return per page.
	Limit *QueryLimit `json:"limit,omitempty"`

	// The number of items to skip before starting to collect the result set.
	Offset *QueryOffset `json:"offset,omitempty"`

	// Filter for querying collections.
	Filter *QueryFilter `json:"filter,omitempty"`

	// The list of attribute and order to sort the result set by.
	SortBy *QuerySortBy `json:"sort_by,omitempty"`
}

// CreateApplicationAuthenticationJSONBody defines parameters for CreateApplicationAuthentication.
type CreateApplicationAuthenticationJSONBody ApplicationAuthentication

// UpdateApplicationAuthenticationJSONBody defines parameters for UpdateApplicationAuthentication.
type UpdateApplicationAuthenticationJSONBody ApplicationAuthentication

// ListApplicationTypesParams defines parameters for ListApplicationTypes.
type ListApplicationTypesParams struct {

	// The numbers of items to return per page.
	Limit *QueryLimit `json:"limit,omitempty"`

	// The number of items to skip before starting to collect the result set.
	Offset *QueryOffset `json:"offset,omitempty"`

	// Filter for querying collections.
	Filter *QueryFilter `json:"filter,omitempty"`

	// The list of attribute and order to sort the result set by.
	SortBy *QuerySortBy `json:"sort_by,omitempty"`
}

// ListApplicationTypeSourcesParams defines parameters for ListApplicationTypeSources.
type ListApplicationTypeSourcesParams struct {

	// The numbers of items to return per page.
	Limit *QueryLimit `json:"limit,omitempty"`

	// The number of items to skip before starting to collect the result set.
	Offset *QueryOffset `json:"offset,omitempty"`

	// Filter for querying collections.
	Filter *QueryFilter `json:"filter,omitempty"`

	// The list of attribute and order to sort the result set by.
	SortBy *QuerySortBy `json:"sort_by,omitempty"`
}

// ListApplicationsParams defines parameters for ListApplications.
type ListApplicationsParams struct {

	// The numbers of items to return per page.
	Limit *QueryLimit `json:"limit,omitempty"`

	// The number of items to skip before starting to collect the result set.
	Offset *QueryOffset `json:"offset,omitempty"`

	// Filter for querying collections.
	Filter *QueryFilter `json:"filter,omitempty"`

	// The list of attribute and order to sort the result set by.
	SortBy *QuerySortBy `json:"sort_by,omitempty"`
}

// CreateApplicationJSONBody defines parameters for CreateApplication.
type CreateApplicationJSONBody Application

// UpdateApplicationJSONBody defines parameters for UpdateApplication.
type UpdateApplicationJSONBody Application

// ListApplicationAuthenticationsParams defines parameters for ListApplicationAuthentications.
type ListApplicationAuthenticationsParams struct {

	// The numbers of items to return per page.
	Limit *QueryLimit `json:"limit,omitempty"`

	// The number of items to skip before starting to collect the result set.
	Offset *QueryOffset `json:"offset,omitempty"`

	// Filter for querying collections.
	Filter *QueryFilter `json:"filter,omitempty"`

	// The list of attribute and order to sort the result set by.
	SortBy *QuerySortBy `json:"sort_by,omitempty"`
}

// ListAuthenticationsParams defines parameters for ListAuthentications.
type ListAuthenticationsParams struct {

	// The numbers of items to return per page.
	Limit *QueryLimit `json:"limit,omitempty"`

	// The number of items to skip before starting to collect the result set.
	Offset *QueryOffset `json:"offset,omitempty"`

	// Filter for querying collections.
	Filter *QueryFilter `json:"filter,omitempty"`

	// The list of attribute and order to sort the result set by.
	SortBy *QuerySortBy `json:"sort_by,omitempty"`
}

// CreateAuthenticationJSONBody defines parameters for CreateAuthentication.
type CreateAuthenticationJSONBody Authentication

// UpdateAuthenticationJSONBody defines parameters for UpdateAuthentication.
type UpdateAuthenticationJSONBody Authentication

// ListEndpointsParams defines parameters for ListEndpoints.
type ListEndpointsParams struct {

	// The numbers of items to return per page.
	Limit *QueryLimit `json:"limit,omitempty"`

	// The number of items to skip before starting to collect the result set.
	Offset *QueryOffset `json:"offset,omitempty"`

	// Filter for querying collections.
	Filter *QueryFilter `json:"filter,omitempty"`

	// The list of attribute and order to sort the result set by.
	SortBy *QuerySortBy `json:"sort_by,omitempty"`
}

// CreateEndpointJSONBody defines parameters for CreateEndpoint.
type CreateEndpointJSONBody Endpoint

// UpdateEndpointJSONBody defines parameters for UpdateEndpoint.
type UpdateEndpointJSONBody Endpoint

// ListEndpointAuthenticationsParams defines parameters for ListEndpointAuthentications.
type ListEndpointAuthenticationsParams struct {

	// The numbers of items to return per page.
	Limit *QueryLimit `json:"limit,omitempty"`

	// The number of items to skip before starting to collect the result set.
	Offset *QueryOffset `json:"offset,omitempty"`

	// Filter for querying collections.
	Filter *QueryFilter `json:"filter,omitempty"`

	// The list of attribute and order to sort the result set by.
	SortBy *QuerySortBy `json:"sort_by,omitempty"`
}

// PostGraphQLJSONBody defines parameters for PostGraphQL.
type PostGraphQLJSONBody GraphQLRequest

// ListSourceTypesParams defines parameters for ListSourceTypes.
type ListSourceTypesParams struct {

	// The numbers of items to return per page.
	Limit *QueryLimit `json:"limit,omitempty"`

	// The number of items to skip before starting to collect the result set.
	Offset *QueryOffset `json:"offset,omitempty"`

	// Filter for querying collections.
	Filter *QueryFilter `json:"filter,omitempty"`

	// The list of attribute and order to sort the result set by.
	SortBy *QuerySortBy `json:"sort_by,omitempty"`
}

// ListSourceTypeSourcesParams defines parameters for ListSourceTypeSources.
type ListSourceTypeSourcesParams struct {

	// The numbers of items to return per page.
	Limit *QueryLimit `json:"limit,omitempty"`

	// The number of items to skip before starting to collect the result set.
	Offset *QueryOffset `json:"offset,omitempty"`

	// Filter for querying collections.
	Filter *QueryFilter `json:"filter,omitempty"`

	// The list of attribute and order to sort the result set by.
	SortBy *QuerySortBy `json:"sort_by,omitempty"`
}

// ListSourcesParams defines parameters for ListSources.
type ListSourcesParams struct {

	// The numbers of items to return per page.
	Limit *QueryLimit `json:"limit,omitempty"`

	// The number of items to skip before starting to collect the result set.
	Offset *QueryOffset `json:"offset,omitempty"`

	// Filter for querying collections.
	Filter *QueryFilter `json:"filter,omitempty"`

	// The list of attribute and order to sort the result set by.
	SortBy *QuerySortBy `json:"sort_by,omitempty"`
}

// CreateSourceJSONBody defines parameters for CreateSource.
type CreateSourceJSONBody Source

// UpdateSourceJSONBody defines parameters for UpdateSource.
type UpdateSourceJSONBody Source

// ListSourceApplicationTypesParams defines parameters for ListSourceApplicationTypes.
type ListSourceApplicationTypesParams struct {

	// The numbers of items to return per page.
	Limit *QueryLimit `json:"limit,omitempty"`

	// The number of items to skip before starting to collect the result set.
	Offset *QueryOffset `json:"offset,omitempty"`

	// Filter for querying collections.
	Filter *QueryFilter `json:"filter,omitempty"`

	// The list of attribute and order to sort the result set by.
	SortBy *QuerySortBy `json:"sort_by,omitempty"`
}

// ListSourceApplicationsParams defines parameters for ListSourceApplications.
type ListSourceApplicationsParams struct {

	// The numbers of items to return per page.
	Limit *QueryLimit `json:"limit,omitempty"`

	// The number of items to skip before starting to collect the result set.
	Offset *QueryOffset `json:"offset,omitempty"`

	// Filter for querying collections.
	Filter *QueryFilter `json:"filter,omitempty"`

	// The list of attribute and order to sort the result set by.
	SortBy *QuerySortBy `json:"sort_by,omitempty"`
}

// ListSourceAuthenticationsParams defines parameters for ListSourceAuthentications.
type ListSourceAuthenticationsParams struct {

	// The numbers of items to return per page.
	Limit *QueryLimit `json:"limit,omitempty"`

	// The number of items to skip before starting to collect the result set.
	Offset *QueryOffset `json:"offset,omitempty"`

	// Filter for querying collections.
	Filter *QueryFilter `json:"filter,omitempty"`

	// The list of attribute and order to sort the result set by.
	SortBy *QuerySortBy `json:"sort_by,omitempty"`
}

// ListSourceEndpointsParams defines parameters for ListSourceEndpoints.
type ListSourceEndpointsParams struct {

	// The numbers of items to return per page.
	Limit *QueryLimit `json:"limit,omitempty"`

	// The number of items to skip before starting to collect the result set.
	Offset *QueryOffset `json:"offset,omitempty"`

	// Filter for querying collections.
	Filter *QueryFilter `json:"filter,omitempty"`

	// The list of attribute and order to sort the result set by.
	SortBy *QuerySortBy `json:"sort_by,omitempty"`
}

// CreateApplicationAuthenticationJSONRequestBody defines body for CreateApplicationAuthentication for application/json ContentType.
type CreateApplicationAuthenticationJSONRequestBody CreateApplicationAuthenticationJSONBody

// UpdateApplicationAuthenticationJSONRequestBody defines body for UpdateApplicationAuthentication for application/json ContentType.
type UpdateApplicationAuthenticationJSONRequestBody UpdateApplicationAuthenticationJSONBody

// CreateApplicationJSONRequestBody defines body for CreateApplication for application/json ContentType.
type CreateApplicationJSONRequestBody CreateApplicationJSONBody

// UpdateApplicationJSONRequestBody defines body for UpdateApplication for application/json ContentType.
type UpdateApplicationJSONRequestBody UpdateApplicationJSONBody

// CreateAuthenticationJSONRequestBody defines body for CreateAuthentication for application/json ContentType.
type CreateAuthenticationJSONRequestBody CreateAuthenticationJSONBody

// UpdateAuthenticationJSONRequestBody defines body for UpdateAuthentication for application/json ContentType.
type UpdateAuthenticationJSONRequestBody UpdateAuthenticationJSONBody

// CreateEndpointJSONRequestBody defines body for CreateEndpoint for application/json ContentType.
type CreateEndpointJSONRequestBody CreateEndpointJSONBody

// UpdateEndpointJSONRequestBody defines body for UpdateEndpoint for application/json ContentType.
type UpdateEndpointJSONRequestBody UpdateEndpointJSONBody

// PostGraphQLJSONRequestBody defines body for PostGraphQL for application/json ContentType.
type PostGraphQLJSONRequestBody PostGraphQLJSONBody

// CreateSourceJSONRequestBody defines body for CreateSource for application/json ContentType.
type CreateSourceJSONRequestBody CreateSourceJSONBody

// UpdateSourceJSONRequestBody defines body for UpdateSource for application/json ContentType.
type UpdateSourceJSONRequestBody UpdateSourceJSONBody

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = http.DefaultClient
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// ListAllApplicationAuthentications request
	ListAllApplicationAuthentications(ctx context.Context, params *ListAllApplicationAuthenticationsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateApplicationAuthentication request  with any body
	CreateApplicationAuthenticationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateApplicationAuthentication(ctx context.Context, body CreateApplicationAuthenticationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApplicationAuthentication request
	DeleteApplicationAuthentication(ctx context.Context, id ID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ShowApplicationAuthentication request
	ShowApplicationAuthentication(ctx context.Context, id ID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateApplicationAuthentication request  with any body
	UpdateApplicationAuthenticationWithBody(ctx context.Context, id ID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateApplicationAuthentication(ctx context.Context, id ID, body UpdateApplicationAuthenticationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListApplicationTypes request
	ListApplicationTypes(ctx context.Context, params *ListApplicationTypesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ShowApplicationType request
	ShowApplicationType(ctx context.Context, id ID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListApplicationTypeSources request
	ListApplicationTypeSources(ctx context.Context, id ID, params *ListApplicationTypeSourcesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListApplications request
	ListApplications(ctx context.Context, params *ListApplicationsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateApplication request  with any body
	CreateApplicationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateApplication(ctx context.Context, body CreateApplicationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApplication request
	DeleteApplication(ctx context.Context, id ID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ShowApplication request
	ShowApplication(ctx context.Context, id ID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateApplication request  with any body
	UpdateApplicationWithBody(ctx context.Context, id ID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateApplication(ctx context.Context, id ID, body UpdateApplicationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListApplicationAuthentications request
	ListApplicationAuthentications(ctx context.Context, id ID, params *ListApplicationAuthenticationsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListAuthentications request
	ListAuthentications(ctx context.Context, params *ListAuthenticationsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateAuthentication request  with any body
	CreateAuthenticationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateAuthentication(ctx context.Context, body CreateAuthenticationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteAuthentication request
	DeleteAuthentication(ctx context.Context, id ID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ShowAuthentication request
	ShowAuthentication(ctx context.Context, id ID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateAuthentication request  with any body
	UpdateAuthenticationWithBody(ctx context.Context, id ID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateAuthentication(ctx context.Context, id ID, body UpdateAuthenticationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListEndpoints request
	ListEndpoints(ctx context.Context, params *ListEndpointsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateEndpoint request  with any body
	CreateEndpointWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateEndpoint(ctx context.Context, body CreateEndpointJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteEndpoint request
	DeleteEndpoint(ctx context.Context, id ID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ShowEndpoint request
	ShowEndpoint(ctx context.Context, id ID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateEndpoint request  with any body
	UpdateEndpointWithBody(ctx context.Context, id ID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateEndpoint(ctx context.Context, id ID, body UpdateEndpointJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListEndpointAuthentications request
	ListEndpointAuthentications(ctx context.Context, id ID, params *ListEndpointAuthenticationsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostGraphQL request  with any body
	PostGraphQLWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostGraphQL(ctx context.Context, body PostGraphQLJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDocumentation request
	GetDocumentation(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListSourceTypes request
	ListSourceTypes(ctx context.Context, params *ListSourceTypesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ShowSourceType request
	ShowSourceType(ctx context.Context, id ID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListSourceTypeSources request
	ListSourceTypeSources(ctx context.Context, id ID, params *ListSourceTypeSourcesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListSources request
	ListSources(ctx context.Context, params *ListSourcesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateSource request  with any body
	CreateSourceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateSource(ctx context.Context, body CreateSourceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteSource request
	DeleteSource(ctx context.Context, id ID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ShowSource request
	ShowSource(ctx context.Context, id ID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateSource request  with any body
	UpdateSourceWithBody(ctx context.Context, id ID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateSource(ctx context.Context, id ID, body UpdateSourceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListSourceApplicationTypes request
	ListSourceApplicationTypes(ctx context.Context, id ID, params *ListSourceApplicationTypesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListSourceApplications request
	ListSourceApplications(ctx context.Context, id ID, params *ListSourceApplicationsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListSourceAuthentications request
	ListSourceAuthentications(ctx context.Context, id ID, params *ListSourceAuthenticationsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CheckAvailabilitySource request
	CheckAvailabilitySource(ctx context.Context, id ID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListSourceEndpoints request
	ListSourceEndpoints(ctx context.Context, id ID, params *ListSourceEndpointsParams, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) ListAllApplicationAuthentications(ctx context.Context, params *ListAllApplicationAuthenticationsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListAllApplicationAuthenticationsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateApplicationAuthenticationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateApplicationAuthenticationRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateApplicationAuthentication(ctx context.Context, body CreateApplicationAuthenticationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateApplicationAuthenticationRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApplicationAuthentication(ctx context.Context, id ID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApplicationAuthenticationRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ShowApplicationAuthentication(ctx context.Context, id ID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewShowApplicationAuthenticationRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateApplicationAuthenticationWithBody(ctx context.Context, id ID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateApplicationAuthenticationRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateApplicationAuthentication(ctx context.Context, id ID, body UpdateApplicationAuthenticationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateApplicationAuthenticationRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListApplicationTypes(ctx context.Context, params *ListApplicationTypesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListApplicationTypesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ShowApplicationType(ctx context.Context, id ID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewShowApplicationTypeRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListApplicationTypeSources(ctx context.Context, id ID, params *ListApplicationTypeSourcesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListApplicationTypeSourcesRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListApplications(ctx context.Context, params *ListApplicationsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListApplicationsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateApplicationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateApplicationRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateApplication(ctx context.Context, body CreateApplicationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateApplicationRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApplication(ctx context.Context, id ID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApplicationRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ShowApplication(ctx context.Context, id ID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewShowApplicationRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateApplicationWithBody(ctx context.Context, id ID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateApplicationRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateApplication(ctx context.Context, id ID, body UpdateApplicationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateApplicationRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListApplicationAuthentications(ctx context.Context, id ID, params *ListApplicationAuthenticationsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListApplicationAuthenticationsRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListAuthentications(ctx context.Context, params *ListAuthenticationsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListAuthenticationsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateAuthenticationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateAuthenticationRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateAuthentication(ctx context.Context, body CreateAuthenticationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateAuthenticationRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteAuthentication(ctx context.Context, id ID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAuthenticationRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ShowAuthentication(ctx context.Context, id ID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewShowAuthenticationRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateAuthenticationWithBody(ctx context.Context, id ID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateAuthenticationRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateAuthentication(ctx context.Context, id ID, body UpdateAuthenticationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateAuthenticationRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListEndpoints(ctx context.Context, params *ListEndpointsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListEndpointsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateEndpointWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateEndpointRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateEndpoint(ctx context.Context, body CreateEndpointJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateEndpointRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteEndpoint(ctx context.Context, id ID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteEndpointRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ShowEndpoint(ctx context.Context, id ID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewShowEndpointRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateEndpointWithBody(ctx context.Context, id ID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateEndpointRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateEndpoint(ctx context.Context, id ID, body UpdateEndpointJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateEndpointRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListEndpointAuthentications(ctx context.Context, id ID, params *ListEndpointAuthenticationsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListEndpointAuthenticationsRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostGraphQLWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostGraphQLRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostGraphQL(ctx context.Context, body PostGraphQLJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostGraphQLRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDocumentation(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDocumentationRequest(c.Server)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListSourceTypes(ctx context.Context, params *ListSourceTypesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListSourceTypesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ShowSourceType(ctx context.Context, id ID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewShowSourceTypeRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListSourceTypeSources(ctx context.Context, id ID, params *ListSourceTypeSourcesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListSourceTypeSourcesRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListSources(ctx context.Context, params *ListSourcesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListSourcesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateSourceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateSourceRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateSource(ctx context.Context, body CreateSourceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateSourceRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteSource(ctx context.Context, id ID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteSourceRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ShowSource(ctx context.Context, id ID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewShowSourceRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateSourceWithBody(ctx context.Context, id ID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateSourceRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateSource(ctx context.Context, id ID, body UpdateSourceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateSourceRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListSourceApplicationTypes(ctx context.Context, id ID, params *ListSourceApplicationTypesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListSourceApplicationTypesRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListSourceApplications(ctx context.Context, id ID, params *ListSourceApplicationsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListSourceApplicationsRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListSourceAuthentications(ctx context.Context, id ID, params *ListSourceAuthenticationsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListSourceAuthenticationsRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CheckAvailabilitySource(ctx context.Context, id ID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCheckAvailabilitySourceRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListSourceEndpoints(ctx context.Context, id ID, params *ListSourceEndpointsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListSourceEndpointsRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewListAllApplicationAuthenticationsRequest generates requests for ListAllApplicationAuthentications
func NewListAllApplicationAuthenticationsRequest(server string, params *ListAllApplicationAuthenticationsParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/application_authentications")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "offset", *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Filter != nil {

		if queryFrag, err := runtime.StyleParam("deepObject", true, "filter", *params.Filter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.SortBy != nil {

		if queryFrag, err := runtime.StyleParam("deepObject", true, "sort_by", *params.SortBy); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateApplicationAuthenticationRequest calls the generic CreateApplicationAuthentication builder with application/json body
func NewCreateApplicationAuthenticationRequest(server string, body CreateApplicationAuthenticationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateApplicationAuthenticationRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateApplicationAuthenticationRequestWithBody generates requests for CreateApplicationAuthentication with any type of body
func NewCreateApplicationAuthenticationRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/application_authentications")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteApplicationAuthenticationRequest generates requests for DeleteApplicationAuthentication
func NewDeleteApplicationAuthenticationRequest(server string, id ID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/application_authentications/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewShowApplicationAuthenticationRequest generates requests for ShowApplicationAuthentication
func NewShowApplicationAuthenticationRequest(server string, id ID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/application_authentications/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateApplicationAuthenticationRequest calls the generic UpdateApplicationAuthentication builder with application/json body
func NewUpdateApplicationAuthenticationRequest(server string, id ID, body UpdateApplicationAuthenticationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateApplicationAuthenticationRequestWithBody(server, id, "application/json", bodyReader)
}

// NewUpdateApplicationAuthenticationRequestWithBody generates requests for UpdateApplicationAuthentication with any type of body
func NewUpdateApplicationAuthenticationRequestWithBody(server string, id ID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/application_authentications/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListApplicationTypesRequest generates requests for ListApplicationTypes
func NewListApplicationTypesRequest(server string, params *ListApplicationTypesParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/application_types")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "offset", *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Filter != nil {

		if queryFrag, err := runtime.StyleParam("deepObject", true, "filter", *params.Filter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.SortBy != nil {

		if queryFrag, err := runtime.StyleParam("deepObject", true, "sort_by", *params.SortBy); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewShowApplicationTypeRequest generates requests for ShowApplicationType
func NewShowApplicationTypeRequest(server string, id ID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/application_types/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListApplicationTypeSourcesRequest generates requests for ListApplicationTypeSources
func NewListApplicationTypeSourcesRequest(server string, id ID, params *ListApplicationTypeSourcesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/application_types/%s/sources", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "offset", *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Filter != nil {

		if queryFrag, err := runtime.StyleParam("deepObject", true, "filter", *params.Filter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.SortBy != nil {

		if queryFrag, err := runtime.StyleParam("deepObject", true, "sort_by", *params.SortBy); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListApplicationsRequest generates requests for ListApplications
func NewListApplicationsRequest(server string, params *ListApplicationsParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/applications")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "offset", *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Filter != nil {

		if queryFrag, err := runtime.StyleParam("deepObject", true, "filter", *params.Filter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.SortBy != nil {

		if queryFrag, err := runtime.StyleParam("deepObject", true, "sort_by", *params.SortBy); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateApplicationRequest calls the generic CreateApplication builder with application/json body
func NewCreateApplicationRequest(server string, body CreateApplicationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateApplicationRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateApplicationRequestWithBody generates requests for CreateApplication with any type of body
func NewCreateApplicationRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/applications")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteApplicationRequest generates requests for DeleteApplication
func NewDeleteApplicationRequest(server string, id ID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/applications/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewShowApplicationRequest generates requests for ShowApplication
func NewShowApplicationRequest(server string, id ID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/applications/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateApplicationRequest calls the generic UpdateApplication builder with application/json body
func NewUpdateApplicationRequest(server string, id ID, body UpdateApplicationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateApplicationRequestWithBody(server, id, "application/json", bodyReader)
}

// NewUpdateApplicationRequestWithBody generates requests for UpdateApplication with any type of body
func NewUpdateApplicationRequestWithBody(server string, id ID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/applications/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListApplicationAuthenticationsRequest generates requests for ListApplicationAuthentications
func NewListApplicationAuthenticationsRequest(server string, id ID, params *ListApplicationAuthenticationsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/applications/%s/authentications", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "offset", *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Filter != nil {

		if queryFrag, err := runtime.StyleParam("deepObject", true, "filter", *params.Filter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.SortBy != nil {

		if queryFrag, err := runtime.StyleParam("deepObject", true, "sort_by", *params.SortBy); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListAuthenticationsRequest generates requests for ListAuthentications
func NewListAuthenticationsRequest(server string, params *ListAuthenticationsParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/authentications")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "offset", *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Filter != nil {

		if queryFrag, err := runtime.StyleParam("deepObject", true, "filter", *params.Filter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.SortBy != nil {

		if queryFrag, err := runtime.StyleParam("deepObject", true, "sort_by", *params.SortBy); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateAuthenticationRequest calls the generic CreateAuthentication builder with application/json body
func NewCreateAuthenticationRequest(server string, body CreateAuthenticationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateAuthenticationRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateAuthenticationRequestWithBody generates requests for CreateAuthentication with any type of body
func NewCreateAuthenticationRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/authentications")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteAuthenticationRequest generates requests for DeleteAuthentication
func NewDeleteAuthenticationRequest(server string, id ID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/authentications/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewShowAuthenticationRequest generates requests for ShowAuthentication
func NewShowAuthenticationRequest(server string, id ID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/authentications/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateAuthenticationRequest calls the generic UpdateAuthentication builder with application/json body
func NewUpdateAuthenticationRequest(server string, id ID, body UpdateAuthenticationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateAuthenticationRequestWithBody(server, id, "application/json", bodyReader)
}

// NewUpdateAuthenticationRequestWithBody generates requests for UpdateAuthentication with any type of body
func NewUpdateAuthenticationRequestWithBody(server string, id ID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/authentications/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListEndpointsRequest generates requests for ListEndpoints
func NewListEndpointsRequest(server string, params *ListEndpointsParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/endpoints")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "offset", *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Filter != nil {

		if queryFrag, err := runtime.StyleParam("deepObject", true, "filter", *params.Filter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.SortBy != nil {

		if queryFrag, err := runtime.StyleParam("deepObject", true, "sort_by", *params.SortBy); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateEndpointRequest calls the generic CreateEndpoint builder with application/json body
func NewCreateEndpointRequest(server string, body CreateEndpointJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateEndpointRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateEndpointRequestWithBody generates requests for CreateEndpoint with any type of body
func NewCreateEndpointRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/endpoints")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteEndpointRequest generates requests for DeleteEndpoint
func NewDeleteEndpointRequest(server string, id ID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/endpoints/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewShowEndpointRequest generates requests for ShowEndpoint
func NewShowEndpointRequest(server string, id ID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/endpoints/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateEndpointRequest calls the generic UpdateEndpoint builder with application/json body
func NewUpdateEndpointRequest(server string, id ID, body UpdateEndpointJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateEndpointRequestWithBody(server, id, "application/json", bodyReader)
}

// NewUpdateEndpointRequestWithBody generates requests for UpdateEndpoint with any type of body
func NewUpdateEndpointRequestWithBody(server string, id ID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/endpoints/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListEndpointAuthenticationsRequest generates requests for ListEndpointAuthentications
func NewListEndpointAuthenticationsRequest(server string, id ID, params *ListEndpointAuthenticationsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/endpoints/%s/authentications", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "offset", *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Filter != nil {

		if queryFrag, err := runtime.StyleParam("deepObject", true, "filter", *params.Filter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.SortBy != nil {

		if queryFrag, err := runtime.StyleParam("deepObject", true, "sort_by", *params.SortBy); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostGraphQLRequest calls the generic PostGraphQL builder with application/json body
func NewPostGraphQLRequest(server string, body PostGraphQLJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostGraphQLRequestWithBody(server, "application/json", bodyReader)
}

// NewPostGraphQLRequestWithBody generates requests for PostGraphQL with any type of body
func NewPostGraphQLRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/graphql")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetDocumentationRequest generates requests for GetDocumentation
func NewGetDocumentationRequest(server string) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/openapi.json")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListSourceTypesRequest generates requests for ListSourceTypes
func NewListSourceTypesRequest(server string, params *ListSourceTypesParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/source_types")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "offset", *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Filter != nil {

		if queryFrag, err := runtime.StyleParam("deepObject", true, "filter", *params.Filter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.SortBy != nil {

		if queryFrag, err := runtime.StyleParam("deepObject", true, "sort_by", *params.SortBy); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewShowSourceTypeRequest generates requests for ShowSourceType
func NewShowSourceTypeRequest(server string, id ID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/source_types/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListSourceTypeSourcesRequest generates requests for ListSourceTypeSources
func NewListSourceTypeSourcesRequest(server string, id ID, params *ListSourceTypeSourcesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/source_types/%s/sources", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "offset", *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Filter != nil {

		if queryFrag, err := runtime.StyleParam("deepObject", true, "filter", *params.Filter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.SortBy != nil {

		if queryFrag, err := runtime.StyleParam("deepObject", true, "sort_by", *params.SortBy); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListSourcesRequest generates requests for ListSources
func NewListSourcesRequest(server string, params *ListSourcesParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/sources")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "offset", *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Filter != nil {

		if queryFrag, err := runtime.StyleParam("deepObject", true, "filter", *params.Filter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.SortBy != nil {

		if queryFrag, err := runtime.StyleParam("deepObject", true, "sort_by", *params.SortBy); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateSourceRequest calls the generic CreateSource builder with application/json body
func NewCreateSourceRequest(server string, body CreateSourceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateSourceRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateSourceRequestWithBody generates requests for CreateSource with any type of body
func NewCreateSourceRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/sources")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteSourceRequest generates requests for DeleteSource
func NewDeleteSourceRequest(server string, id ID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/sources/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewShowSourceRequest generates requests for ShowSource
func NewShowSourceRequest(server string, id ID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/sources/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateSourceRequest calls the generic UpdateSource builder with application/json body
func NewUpdateSourceRequest(server string, id ID, body UpdateSourceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateSourceRequestWithBody(server, id, "application/json", bodyReader)
}

// NewUpdateSourceRequestWithBody generates requests for UpdateSource with any type of body
func NewUpdateSourceRequestWithBody(server string, id ID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/sources/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListSourceApplicationTypesRequest generates requests for ListSourceApplicationTypes
func NewListSourceApplicationTypesRequest(server string, id ID, params *ListSourceApplicationTypesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/sources/%s/application_types", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "offset", *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Filter != nil {

		if queryFrag, err := runtime.StyleParam("deepObject", true, "filter", *params.Filter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.SortBy != nil {

		if queryFrag, err := runtime.StyleParam("deepObject", true, "sort_by", *params.SortBy); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListSourceApplicationsRequest generates requests for ListSourceApplications
func NewListSourceApplicationsRequest(server string, id ID, params *ListSourceApplicationsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/sources/%s/applications", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "offset", *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Filter != nil {

		if queryFrag, err := runtime.StyleParam("deepObject", true, "filter", *params.Filter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.SortBy != nil {

		if queryFrag, err := runtime.StyleParam("deepObject", true, "sort_by", *params.SortBy); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListSourceAuthenticationsRequest generates requests for ListSourceAuthentications
func NewListSourceAuthenticationsRequest(server string, id ID, params *ListSourceAuthenticationsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/sources/%s/authentications", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "offset", *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Filter != nil {

		if queryFrag, err := runtime.StyleParam("deepObject", true, "filter", *params.Filter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.SortBy != nil {

		if queryFrag, err := runtime.StyleParam("deepObject", true, "sort_by", *params.SortBy); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCheckAvailabilitySourceRequest generates requests for CheckAvailabilitySource
func NewCheckAvailabilitySourceRequest(server string, id ID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/sources/%s/check_availability", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListSourceEndpointsRequest generates requests for ListSourceEndpoints
func NewListSourceEndpointsRequest(server string, id ID, params *ListSourceEndpointsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/sources/%s/endpoints", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "offset", *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Filter != nil {

		if queryFrag, err := runtime.StyleParam("deepObject", true, "filter", *params.Filter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.SortBy != nil {

		if queryFrag, err := runtime.StyleParam("deepObject", true, "sort_by", *params.SortBy); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	req = req.WithContext(ctx)
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// ListAllApplicationAuthentications request
	ListAllApplicationAuthenticationsWithResponse(ctx context.Context, params *ListAllApplicationAuthenticationsParams) (*ListAllApplicationAuthenticationsResponse, error)

	// CreateApplicationAuthentication request  with any body
	CreateApplicationAuthenticationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateApplicationAuthenticationResponse, error)

	CreateApplicationAuthenticationWithResponse(ctx context.Context, body CreateApplicationAuthenticationJSONRequestBody) (*CreateApplicationAuthenticationResponse, error)

	// DeleteApplicationAuthentication request
	DeleteApplicationAuthenticationWithResponse(ctx context.Context, id ID) (*DeleteApplicationAuthenticationResponse, error)

	// ShowApplicationAuthentication request
	ShowApplicationAuthenticationWithResponse(ctx context.Context, id ID) (*ShowApplicationAuthenticationResponse, error)

	// UpdateApplicationAuthentication request  with any body
	UpdateApplicationAuthenticationWithBodyWithResponse(ctx context.Context, id ID, contentType string, body io.Reader) (*UpdateApplicationAuthenticationResponse, error)

	UpdateApplicationAuthenticationWithResponse(ctx context.Context, id ID, body UpdateApplicationAuthenticationJSONRequestBody) (*UpdateApplicationAuthenticationResponse, error)

	// ListApplicationTypes request
	ListApplicationTypesWithResponse(ctx context.Context, params *ListApplicationTypesParams) (*ListApplicationTypesResponse, error)

	// ShowApplicationType request
	ShowApplicationTypeWithResponse(ctx context.Context, id ID) (*ShowApplicationTypeResponse, error)

	// ListApplicationTypeSources request
	ListApplicationTypeSourcesWithResponse(ctx context.Context, id ID, params *ListApplicationTypeSourcesParams) (*ListApplicationTypeSourcesResponse, error)

	// ListApplications request
	ListApplicationsWithResponse(ctx context.Context, params *ListApplicationsParams) (*ListApplicationsResponse, error)

	// CreateApplication request  with any body
	CreateApplicationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateApplicationResponse, error)

	CreateApplicationWithResponse(ctx context.Context, body CreateApplicationJSONRequestBody) (*CreateApplicationResponse, error)

	// DeleteApplication request
	DeleteApplicationWithResponse(ctx context.Context, id ID) (*DeleteApplicationResponse, error)

	// ShowApplication request
	ShowApplicationWithResponse(ctx context.Context, id ID) (*ShowApplicationResponse, error)

	// UpdateApplication request  with any body
	UpdateApplicationWithBodyWithResponse(ctx context.Context, id ID, contentType string, body io.Reader) (*UpdateApplicationResponse, error)

	UpdateApplicationWithResponse(ctx context.Context, id ID, body UpdateApplicationJSONRequestBody) (*UpdateApplicationResponse, error)

	// ListApplicationAuthentications request
	ListApplicationAuthenticationsWithResponse(ctx context.Context, id ID, params *ListApplicationAuthenticationsParams) (*ListApplicationAuthenticationsResponse, error)

	// ListAuthentications request
	ListAuthenticationsWithResponse(ctx context.Context, params *ListAuthenticationsParams) (*ListAuthenticationsResponse, error)

	// CreateAuthentication request  with any body
	CreateAuthenticationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateAuthenticationResponse, error)

	CreateAuthenticationWithResponse(ctx context.Context, body CreateAuthenticationJSONRequestBody) (*CreateAuthenticationResponse, error)

	// DeleteAuthentication request
	DeleteAuthenticationWithResponse(ctx context.Context, id ID) (*DeleteAuthenticationResponse, error)

	// ShowAuthentication request
	ShowAuthenticationWithResponse(ctx context.Context, id ID) (*ShowAuthenticationResponse, error)

	// UpdateAuthentication request  with any body
	UpdateAuthenticationWithBodyWithResponse(ctx context.Context, id ID, contentType string, body io.Reader) (*UpdateAuthenticationResponse, error)

	UpdateAuthenticationWithResponse(ctx context.Context, id ID, body UpdateAuthenticationJSONRequestBody) (*UpdateAuthenticationResponse, error)

	// ListEndpoints request
	ListEndpointsWithResponse(ctx context.Context, params *ListEndpointsParams) (*ListEndpointsResponse, error)

	// CreateEndpoint request  with any body
	CreateEndpointWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateEndpointResponse, error)

	CreateEndpointWithResponse(ctx context.Context, body CreateEndpointJSONRequestBody) (*CreateEndpointResponse, error)

	// DeleteEndpoint request
	DeleteEndpointWithResponse(ctx context.Context, id ID) (*DeleteEndpointResponse, error)

	// ShowEndpoint request
	ShowEndpointWithResponse(ctx context.Context, id ID) (*ShowEndpointResponse, error)

	// UpdateEndpoint request  with any body
	UpdateEndpointWithBodyWithResponse(ctx context.Context, id ID, contentType string, body io.Reader) (*UpdateEndpointResponse, error)

	UpdateEndpointWithResponse(ctx context.Context, id ID, body UpdateEndpointJSONRequestBody) (*UpdateEndpointResponse, error)

	// ListEndpointAuthentications request
	ListEndpointAuthenticationsWithResponse(ctx context.Context, id ID, params *ListEndpointAuthenticationsParams) (*ListEndpointAuthenticationsResponse, error)

	// PostGraphQL request  with any body
	PostGraphQLWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostGraphQLResponse, error)

	PostGraphQLWithResponse(ctx context.Context, body PostGraphQLJSONRequestBody) (*PostGraphQLResponse, error)

	// GetDocumentation request
	GetDocumentationWithResponse(ctx context.Context) (*GetDocumentationResponse, error)

	// ListSourceTypes request
	ListSourceTypesWithResponse(ctx context.Context, params *ListSourceTypesParams) (*ListSourceTypesResponse, error)

	// ShowSourceType request
	ShowSourceTypeWithResponse(ctx context.Context, id ID) (*ShowSourceTypeResponse, error)

	// ListSourceTypeSources request
	ListSourceTypeSourcesWithResponse(ctx context.Context, id ID, params *ListSourceTypeSourcesParams) (*ListSourceTypeSourcesResponse, error)

	// ListSources request
	ListSourcesWithResponse(ctx context.Context, params *ListSourcesParams) (*ListSourcesResponse, error)

	// CreateSource request  with any body
	CreateSourceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateSourceResponse, error)

	CreateSourceWithResponse(ctx context.Context, body CreateSourceJSONRequestBody) (*CreateSourceResponse, error)

	// DeleteSource request
	DeleteSourceWithResponse(ctx context.Context, id ID) (*DeleteSourceResponse, error)

	// ShowSource request
	ShowSourceWithResponse(ctx context.Context, id ID) (*ShowSourceResponse, error)

	// UpdateSource request  with any body
	UpdateSourceWithBodyWithResponse(ctx context.Context, id ID, contentType string, body io.Reader) (*UpdateSourceResponse, error)

	UpdateSourceWithResponse(ctx context.Context, id ID, body UpdateSourceJSONRequestBody) (*UpdateSourceResponse, error)

	// ListSourceApplicationTypes request
	ListSourceApplicationTypesWithResponse(ctx context.Context, id ID, params *ListSourceApplicationTypesParams) (*ListSourceApplicationTypesResponse, error)

	// ListSourceApplications request
	ListSourceApplicationsWithResponse(ctx context.Context, id ID, params *ListSourceApplicationsParams) (*ListSourceApplicationsResponse, error)

	// ListSourceAuthentications request
	ListSourceAuthenticationsWithResponse(ctx context.Context, id ID, params *ListSourceAuthenticationsParams) (*ListSourceAuthenticationsResponse, error)

	// CheckAvailabilitySource request
	CheckAvailabilitySourceWithResponse(ctx context.Context, id ID) (*CheckAvailabilitySourceResponse, error)

	// ListSourceEndpoints request
	ListSourceEndpointsWithResponse(ctx context.Context, id ID, params *ListSourceEndpointsParams) (*ListSourceEndpointsResponse, error)
}

type ListAllApplicationAuthenticationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ApplicationAuthenticationsCollection
}

// Status returns HTTPResponse.Status
func (r ListAllApplicationAuthenticationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListAllApplicationAuthenticationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateApplicationAuthenticationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ApplicationAuthentication
}

// Status returns HTTPResponse.Status
func (r CreateApplicationAuthenticationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateApplicationAuthenticationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApplicationAuthenticationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *ErrorNotFound
}

// Status returns HTTPResponse.Status
func (r DeleteApplicationAuthenticationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApplicationAuthenticationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ShowApplicationAuthenticationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ApplicationAuthentication
	JSON404      *ErrorNotFound
}

// Status returns HTTPResponse.Status
func (r ShowApplicationAuthenticationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ShowApplicationAuthenticationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateApplicationAuthenticationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *ErrorNotFound
}

// Status returns HTTPResponse.Status
func (r UpdateApplicationAuthenticationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateApplicationAuthenticationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListApplicationTypesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ApplicationTypesCollection
}

// Status returns HTTPResponse.Status
func (r ListApplicationTypesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListApplicationTypesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ShowApplicationTypeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ApplicationType
	JSON404      *ErrorNotFound
}

// Status returns HTTPResponse.Status
func (r ShowApplicationTypeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ShowApplicationTypeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListApplicationTypeSourcesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SourcesCollection
	JSON404      *ErrorNotFound
}

// Status returns HTTPResponse.Status
func (r ListApplicationTypeSourcesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListApplicationTypeSourcesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListApplicationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ApplicationsCollection
}

// Status returns HTTPResponse.Status
func (r ListApplicationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListApplicationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateApplicationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Application
}

// Status returns HTTPResponse.Status
func (r CreateApplicationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateApplicationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApplicationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *ErrorNotFound
}

// Status returns HTTPResponse.Status
func (r DeleteApplicationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApplicationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ShowApplicationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Application
	JSON404      *ErrorNotFound
}

// Status returns HTTPResponse.Status
func (r ShowApplicationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ShowApplicationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateApplicationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *ErrorNotFound
}

// Status returns HTTPResponse.Status
func (r UpdateApplicationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateApplicationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListApplicationAuthenticationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AuthenticationsCollection
	JSON404      *ErrorNotFound
}

// Status returns HTTPResponse.Status
func (r ListApplicationAuthenticationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListApplicationAuthenticationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListAuthenticationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AuthenticationsCollection
}

// Status returns HTTPResponse.Status
func (r ListAuthenticationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListAuthenticationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateAuthenticationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Authentication
}

// Status returns HTTPResponse.Status
func (r CreateAuthenticationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateAuthenticationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteAuthenticationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *ErrorNotFound
}

// Status returns HTTPResponse.Status
func (r DeleteAuthenticationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAuthenticationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ShowAuthenticationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Authentication
	JSON404      *ErrorNotFound
}

// Status returns HTTPResponse.Status
func (r ShowAuthenticationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ShowAuthenticationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateAuthenticationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *ErrorNotFound
}

// Status returns HTTPResponse.Status
func (r UpdateAuthenticationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateAuthenticationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListEndpointsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EndpointsCollection
}

// Status returns HTTPResponse.Status
func (r ListEndpointsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListEndpointsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateEndpointResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Endpoint
}

// Status returns HTTPResponse.Status
func (r CreateEndpointResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateEndpointResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteEndpointResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *ErrorNotFound
}

// Status returns HTTPResponse.Status
func (r DeleteEndpointResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteEndpointResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ShowEndpointResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Endpoint
	JSON404      *ErrorNotFound
}

// Status returns HTTPResponse.Status
func (r ShowEndpointResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ShowEndpointResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateEndpointResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *ErrorNotFound
}

// Status returns HTTPResponse.Status
func (r UpdateEndpointResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateEndpointResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListEndpointAuthenticationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AuthenticationsCollection
	JSON404      *ErrorNotFound
}

// Status returns HTTPResponse.Status
func (r ListEndpointAuthenticationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListEndpointAuthenticationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostGraphQLResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GraphQLResponse
}

// Status returns HTTPResponse.Status
func (r PostGraphQLResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostGraphQLResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDocumentationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetDocumentationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDocumentationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListSourceTypesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SourceTypesCollection
}

// Status returns HTTPResponse.Status
func (r ListSourceTypesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListSourceTypesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ShowSourceTypeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SourceType
	JSON404      *ErrorNotFound
}

// Status returns HTTPResponse.Status
func (r ShowSourceTypeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ShowSourceTypeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListSourceTypeSourcesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SourcesCollection
	JSON404      *ErrorNotFound
}

// Status returns HTTPResponse.Status
func (r ListSourceTypeSourcesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListSourceTypeSourcesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListSourcesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SourcesCollection
}

// Status returns HTTPResponse.Status
func (r ListSourcesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListSourcesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateSourceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Source
}

// Status returns HTTPResponse.Status
func (r CreateSourceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateSourceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteSourceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *ErrorNotFound
}

// Status returns HTTPResponse.Status
func (r DeleteSourceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteSourceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ShowSourceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Source
	JSON404      *ErrorNotFound
}

// Status returns HTTPResponse.Status
func (r ShowSourceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ShowSourceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateSourceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *ErrorNotFound
}

// Status returns HTTPResponse.Status
func (r UpdateSourceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateSourceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListSourceApplicationTypesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ApplicationTypesCollection
	JSON404      *ErrorNotFound
}

// Status returns HTTPResponse.Status
func (r ListSourceApplicationTypesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListSourceApplicationTypesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListSourceApplicationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ApplicationsCollection
	JSON404      *ErrorNotFound
}

// Status returns HTTPResponse.Status
func (r ListSourceApplicationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListSourceApplicationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListSourceAuthenticationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AuthenticationsCollection
	JSON404      *ErrorNotFound
}

// Status returns HTTPResponse.Status
func (r ListSourceAuthenticationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListSourceAuthenticationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CheckAvailabilitySourceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *ErrorNotFound
}

// Status returns HTTPResponse.Status
func (r CheckAvailabilitySourceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CheckAvailabilitySourceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListSourceEndpointsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EndpointsCollection
	JSON404      *ErrorNotFound
}

// Status returns HTTPResponse.Status
func (r ListSourceEndpointsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListSourceEndpointsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// ListAllApplicationAuthenticationsWithResponse request returning *ListAllApplicationAuthenticationsResponse
func (c *ClientWithResponses) ListAllApplicationAuthenticationsWithResponse(ctx context.Context, params *ListAllApplicationAuthenticationsParams) (*ListAllApplicationAuthenticationsResponse, error) {
	rsp, err := c.ListAllApplicationAuthentications(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseListAllApplicationAuthenticationsResponse(rsp)
}

// CreateApplicationAuthenticationWithBodyWithResponse request with arbitrary body returning *CreateApplicationAuthenticationResponse
func (c *ClientWithResponses) CreateApplicationAuthenticationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateApplicationAuthenticationResponse, error) {
	rsp, err := c.CreateApplicationAuthenticationWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateApplicationAuthenticationResponse(rsp)
}

func (c *ClientWithResponses) CreateApplicationAuthenticationWithResponse(ctx context.Context, body CreateApplicationAuthenticationJSONRequestBody) (*CreateApplicationAuthenticationResponse, error) {
	rsp, err := c.CreateApplicationAuthentication(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateApplicationAuthenticationResponse(rsp)
}

// DeleteApplicationAuthenticationWithResponse request returning *DeleteApplicationAuthenticationResponse
func (c *ClientWithResponses) DeleteApplicationAuthenticationWithResponse(ctx context.Context, id ID) (*DeleteApplicationAuthenticationResponse, error) {
	rsp, err := c.DeleteApplicationAuthentication(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApplicationAuthenticationResponse(rsp)
}

// ShowApplicationAuthenticationWithResponse request returning *ShowApplicationAuthenticationResponse
func (c *ClientWithResponses) ShowApplicationAuthenticationWithResponse(ctx context.Context, id ID) (*ShowApplicationAuthenticationResponse, error) {
	rsp, err := c.ShowApplicationAuthentication(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseShowApplicationAuthenticationResponse(rsp)
}

// UpdateApplicationAuthenticationWithBodyWithResponse request with arbitrary body returning *UpdateApplicationAuthenticationResponse
func (c *ClientWithResponses) UpdateApplicationAuthenticationWithBodyWithResponse(ctx context.Context, id ID, contentType string, body io.Reader) (*UpdateApplicationAuthenticationResponse, error) {
	rsp, err := c.UpdateApplicationAuthenticationWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseUpdateApplicationAuthenticationResponse(rsp)
}

func (c *ClientWithResponses) UpdateApplicationAuthenticationWithResponse(ctx context.Context, id ID, body UpdateApplicationAuthenticationJSONRequestBody) (*UpdateApplicationAuthenticationResponse, error) {
	rsp, err := c.UpdateApplicationAuthentication(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParseUpdateApplicationAuthenticationResponse(rsp)
}

// ListApplicationTypesWithResponse request returning *ListApplicationTypesResponse
func (c *ClientWithResponses) ListApplicationTypesWithResponse(ctx context.Context, params *ListApplicationTypesParams) (*ListApplicationTypesResponse, error) {
	rsp, err := c.ListApplicationTypes(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseListApplicationTypesResponse(rsp)
}

// ShowApplicationTypeWithResponse request returning *ShowApplicationTypeResponse
func (c *ClientWithResponses) ShowApplicationTypeWithResponse(ctx context.Context, id ID) (*ShowApplicationTypeResponse, error) {
	rsp, err := c.ShowApplicationType(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseShowApplicationTypeResponse(rsp)
}

// ListApplicationTypeSourcesWithResponse request returning *ListApplicationTypeSourcesResponse
func (c *ClientWithResponses) ListApplicationTypeSourcesWithResponse(ctx context.Context, id ID, params *ListApplicationTypeSourcesParams) (*ListApplicationTypeSourcesResponse, error) {
	rsp, err := c.ListApplicationTypeSources(ctx, id, params)
	if err != nil {
		return nil, err
	}
	return ParseListApplicationTypeSourcesResponse(rsp)
}

// ListApplicationsWithResponse request returning *ListApplicationsResponse
func (c *ClientWithResponses) ListApplicationsWithResponse(ctx context.Context, params *ListApplicationsParams) (*ListApplicationsResponse, error) {
	rsp, err := c.ListApplications(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseListApplicationsResponse(rsp)
}

// CreateApplicationWithBodyWithResponse request with arbitrary body returning *CreateApplicationResponse
func (c *ClientWithResponses) CreateApplicationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateApplicationResponse, error) {
	rsp, err := c.CreateApplicationWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateApplicationResponse(rsp)
}

func (c *ClientWithResponses) CreateApplicationWithResponse(ctx context.Context, body CreateApplicationJSONRequestBody) (*CreateApplicationResponse, error) {
	rsp, err := c.CreateApplication(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateApplicationResponse(rsp)
}

// DeleteApplicationWithResponse request returning *DeleteApplicationResponse
func (c *ClientWithResponses) DeleteApplicationWithResponse(ctx context.Context, id ID) (*DeleteApplicationResponse, error) {
	rsp, err := c.DeleteApplication(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApplicationResponse(rsp)
}

// ShowApplicationWithResponse request returning *ShowApplicationResponse
func (c *ClientWithResponses) ShowApplicationWithResponse(ctx context.Context, id ID) (*ShowApplicationResponse, error) {
	rsp, err := c.ShowApplication(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseShowApplicationResponse(rsp)
}

// UpdateApplicationWithBodyWithResponse request with arbitrary body returning *UpdateApplicationResponse
func (c *ClientWithResponses) UpdateApplicationWithBodyWithResponse(ctx context.Context, id ID, contentType string, body io.Reader) (*UpdateApplicationResponse, error) {
	rsp, err := c.UpdateApplicationWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseUpdateApplicationResponse(rsp)
}

func (c *ClientWithResponses) UpdateApplicationWithResponse(ctx context.Context, id ID, body UpdateApplicationJSONRequestBody) (*UpdateApplicationResponse, error) {
	rsp, err := c.UpdateApplication(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParseUpdateApplicationResponse(rsp)
}

// ListApplicationAuthenticationsWithResponse request returning *ListApplicationAuthenticationsResponse
func (c *ClientWithResponses) ListApplicationAuthenticationsWithResponse(ctx context.Context, id ID, params *ListApplicationAuthenticationsParams) (*ListApplicationAuthenticationsResponse, error) {
	rsp, err := c.ListApplicationAuthentications(ctx, id, params)
	if err != nil {
		return nil, err
	}
	return ParseListApplicationAuthenticationsResponse(rsp)
}

// ListAuthenticationsWithResponse request returning *ListAuthenticationsResponse
func (c *ClientWithResponses) ListAuthenticationsWithResponse(ctx context.Context, params *ListAuthenticationsParams) (*ListAuthenticationsResponse, error) {
	rsp, err := c.ListAuthentications(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseListAuthenticationsResponse(rsp)
}

// CreateAuthenticationWithBodyWithResponse request with arbitrary body returning *CreateAuthenticationResponse
func (c *ClientWithResponses) CreateAuthenticationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateAuthenticationResponse, error) {
	rsp, err := c.CreateAuthenticationWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateAuthenticationResponse(rsp)
}

func (c *ClientWithResponses) CreateAuthenticationWithResponse(ctx context.Context, body CreateAuthenticationJSONRequestBody) (*CreateAuthenticationResponse, error) {
	rsp, err := c.CreateAuthentication(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateAuthenticationResponse(rsp)
}

// DeleteAuthenticationWithResponse request returning *DeleteAuthenticationResponse
func (c *ClientWithResponses) DeleteAuthenticationWithResponse(ctx context.Context, id ID) (*DeleteAuthenticationResponse, error) {
	rsp, err := c.DeleteAuthentication(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAuthenticationResponse(rsp)
}

// ShowAuthenticationWithResponse request returning *ShowAuthenticationResponse
func (c *ClientWithResponses) ShowAuthenticationWithResponse(ctx context.Context, id ID) (*ShowAuthenticationResponse, error) {
	rsp, err := c.ShowAuthentication(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseShowAuthenticationResponse(rsp)
}

// UpdateAuthenticationWithBodyWithResponse request with arbitrary body returning *UpdateAuthenticationResponse
func (c *ClientWithResponses) UpdateAuthenticationWithBodyWithResponse(ctx context.Context, id ID, contentType string, body io.Reader) (*UpdateAuthenticationResponse, error) {
	rsp, err := c.UpdateAuthenticationWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseUpdateAuthenticationResponse(rsp)
}

func (c *ClientWithResponses) UpdateAuthenticationWithResponse(ctx context.Context, id ID, body UpdateAuthenticationJSONRequestBody) (*UpdateAuthenticationResponse, error) {
	rsp, err := c.UpdateAuthentication(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParseUpdateAuthenticationResponse(rsp)
}

// ListEndpointsWithResponse request returning *ListEndpointsResponse
func (c *ClientWithResponses) ListEndpointsWithResponse(ctx context.Context, params *ListEndpointsParams) (*ListEndpointsResponse, error) {
	rsp, err := c.ListEndpoints(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseListEndpointsResponse(rsp)
}

// CreateEndpointWithBodyWithResponse request with arbitrary body returning *CreateEndpointResponse
func (c *ClientWithResponses) CreateEndpointWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateEndpointResponse, error) {
	rsp, err := c.CreateEndpointWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateEndpointResponse(rsp)
}

func (c *ClientWithResponses) CreateEndpointWithResponse(ctx context.Context, body CreateEndpointJSONRequestBody) (*CreateEndpointResponse, error) {
	rsp, err := c.CreateEndpoint(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateEndpointResponse(rsp)
}

// DeleteEndpointWithResponse request returning *DeleteEndpointResponse
func (c *ClientWithResponses) DeleteEndpointWithResponse(ctx context.Context, id ID) (*DeleteEndpointResponse, error) {
	rsp, err := c.DeleteEndpoint(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseDeleteEndpointResponse(rsp)
}

// ShowEndpointWithResponse request returning *ShowEndpointResponse
func (c *ClientWithResponses) ShowEndpointWithResponse(ctx context.Context, id ID) (*ShowEndpointResponse, error) {
	rsp, err := c.ShowEndpoint(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseShowEndpointResponse(rsp)
}

// UpdateEndpointWithBodyWithResponse request with arbitrary body returning *UpdateEndpointResponse
func (c *ClientWithResponses) UpdateEndpointWithBodyWithResponse(ctx context.Context, id ID, contentType string, body io.Reader) (*UpdateEndpointResponse, error) {
	rsp, err := c.UpdateEndpointWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseUpdateEndpointResponse(rsp)
}

func (c *ClientWithResponses) UpdateEndpointWithResponse(ctx context.Context, id ID, body UpdateEndpointJSONRequestBody) (*UpdateEndpointResponse, error) {
	rsp, err := c.UpdateEndpoint(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParseUpdateEndpointResponse(rsp)
}

// ListEndpointAuthenticationsWithResponse request returning *ListEndpointAuthenticationsResponse
func (c *ClientWithResponses) ListEndpointAuthenticationsWithResponse(ctx context.Context, id ID, params *ListEndpointAuthenticationsParams) (*ListEndpointAuthenticationsResponse, error) {
	rsp, err := c.ListEndpointAuthentications(ctx, id, params)
	if err != nil {
		return nil, err
	}
	return ParseListEndpointAuthenticationsResponse(rsp)
}

// PostGraphQLWithBodyWithResponse request with arbitrary body returning *PostGraphQLResponse
func (c *ClientWithResponses) PostGraphQLWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostGraphQLResponse, error) {
	rsp, err := c.PostGraphQLWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostGraphQLResponse(rsp)
}

func (c *ClientWithResponses) PostGraphQLWithResponse(ctx context.Context, body PostGraphQLJSONRequestBody) (*PostGraphQLResponse, error) {
	rsp, err := c.PostGraphQL(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParsePostGraphQLResponse(rsp)
}

// GetDocumentationWithResponse request returning *GetDocumentationResponse
func (c *ClientWithResponses) GetDocumentationWithResponse(ctx context.Context) (*GetDocumentationResponse, error) {
	rsp, err := c.GetDocumentation(ctx)
	if err != nil {
		return nil, err
	}
	return ParseGetDocumentationResponse(rsp)
}

// ListSourceTypesWithResponse request returning *ListSourceTypesResponse
func (c *ClientWithResponses) ListSourceTypesWithResponse(ctx context.Context, params *ListSourceTypesParams) (*ListSourceTypesResponse, error) {
	rsp, err := c.ListSourceTypes(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseListSourceTypesResponse(rsp)
}

// ShowSourceTypeWithResponse request returning *ShowSourceTypeResponse
func (c *ClientWithResponses) ShowSourceTypeWithResponse(ctx context.Context, id ID) (*ShowSourceTypeResponse, error) {
	rsp, err := c.ShowSourceType(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseShowSourceTypeResponse(rsp)
}

// ListSourceTypeSourcesWithResponse request returning *ListSourceTypeSourcesResponse
func (c *ClientWithResponses) ListSourceTypeSourcesWithResponse(ctx context.Context, id ID, params *ListSourceTypeSourcesParams) (*ListSourceTypeSourcesResponse, error) {
	rsp, err := c.ListSourceTypeSources(ctx, id, params)
	if err != nil {
		return nil, err
	}
	return ParseListSourceTypeSourcesResponse(rsp)
}

// ListSourcesWithResponse request returning *ListSourcesResponse
func (c *ClientWithResponses) ListSourcesWithResponse(ctx context.Context, params *ListSourcesParams) (*ListSourcesResponse, error) {
	rsp, err := c.ListSources(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseListSourcesResponse(rsp)
}

// CreateSourceWithBodyWithResponse request with arbitrary body returning *CreateSourceResponse
func (c *ClientWithResponses) CreateSourceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateSourceResponse, error) {
	rsp, err := c.CreateSourceWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateSourceResponse(rsp)
}

func (c *ClientWithResponses) CreateSourceWithResponse(ctx context.Context, body CreateSourceJSONRequestBody) (*CreateSourceResponse, error) {
	rsp, err := c.CreateSource(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateSourceResponse(rsp)
}

// DeleteSourceWithResponse request returning *DeleteSourceResponse
func (c *ClientWithResponses) DeleteSourceWithResponse(ctx context.Context, id ID) (*DeleteSourceResponse, error) {
	rsp, err := c.DeleteSource(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseDeleteSourceResponse(rsp)
}

// ShowSourceWithResponse request returning *ShowSourceResponse
func (c *ClientWithResponses) ShowSourceWithResponse(ctx context.Context, id ID) (*ShowSourceResponse, error) {
	rsp, err := c.ShowSource(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseShowSourceResponse(rsp)
}

// UpdateSourceWithBodyWithResponse request with arbitrary body returning *UpdateSourceResponse
func (c *ClientWithResponses) UpdateSourceWithBodyWithResponse(ctx context.Context, id ID, contentType string, body io.Reader) (*UpdateSourceResponse, error) {
	rsp, err := c.UpdateSourceWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseUpdateSourceResponse(rsp)
}

func (c *ClientWithResponses) UpdateSourceWithResponse(ctx context.Context, id ID, body UpdateSourceJSONRequestBody) (*UpdateSourceResponse, error) {
	rsp, err := c.UpdateSource(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParseUpdateSourceResponse(rsp)
}

// ListSourceApplicationTypesWithResponse request returning *ListSourceApplicationTypesResponse
func (c *ClientWithResponses) ListSourceApplicationTypesWithResponse(ctx context.Context, id ID, params *ListSourceApplicationTypesParams) (*ListSourceApplicationTypesResponse, error) {
	rsp, err := c.ListSourceApplicationTypes(ctx, id, params)
	if err != nil {
		return nil, err
	}
	return ParseListSourceApplicationTypesResponse(rsp)
}

// ListSourceApplicationsWithResponse request returning *ListSourceApplicationsResponse
func (c *ClientWithResponses) ListSourceApplicationsWithResponse(ctx context.Context, id ID, params *ListSourceApplicationsParams) (*ListSourceApplicationsResponse, error) {
	rsp, err := c.ListSourceApplications(ctx, id, params)
	if err != nil {
		return nil, err
	}
	return ParseListSourceApplicationsResponse(rsp)
}

// ListSourceAuthenticationsWithResponse request returning *ListSourceAuthenticationsResponse
func (c *ClientWithResponses) ListSourceAuthenticationsWithResponse(ctx context.Context, id ID, params *ListSourceAuthenticationsParams) (*ListSourceAuthenticationsResponse, error) {
	rsp, err := c.ListSourceAuthentications(ctx, id, params)
	if err != nil {
		return nil, err
	}
	return ParseListSourceAuthenticationsResponse(rsp)
}

// CheckAvailabilitySourceWithResponse request returning *CheckAvailabilitySourceResponse
func (c *ClientWithResponses) CheckAvailabilitySourceWithResponse(ctx context.Context, id ID) (*CheckAvailabilitySourceResponse, error) {
	rsp, err := c.CheckAvailabilitySource(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseCheckAvailabilitySourceResponse(rsp)
}

// ListSourceEndpointsWithResponse request returning *ListSourceEndpointsResponse
func (c *ClientWithResponses) ListSourceEndpointsWithResponse(ctx context.Context, id ID, params *ListSourceEndpointsParams) (*ListSourceEndpointsResponse, error) {
	rsp, err := c.ListSourceEndpoints(ctx, id, params)
	if err != nil {
		return nil, err
	}
	return ParseListSourceEndpointsResponse(rsp)
}

// ParseListAllApplicationAuthenticationsResponse parses an HTTP response from a ListAllApplicationAuthenticationsWithResponse call
func ParseListAllApplicationAuthenticationsResponse(rsp *http.Response) (*ListAllApplicationAuthenticationsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ListAllApplicationAuthenticationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ApplicationAuthenticationsCollection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateApplicationAuthenticationResponse parses an HTTP response from a CreateApplicationAuthenticationWithResponse call
func ParseCreateApplicationAuthenticationResponse(rsp *http.Response) (*CreateApplicationAuthenticationResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateApplicationAuthenticationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ApplicationAuthentication
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeleteApplicationAuthenticationResponse parses an HTTP response from a DeleteApplicationAuthenticationWithResponse call
func ParseDeleteApplicationAuthenticationResponse(rsp *http.Response) (*DeleteApplicationAuthenticationResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteApplicationAuthenticationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorNotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseShowApplicationAuthenticationResponse parses an HTTP response from a ShowApplicationAuthenticationWithResponse call
func ParseShowApplicationAuthenticationResponse(rsp *http.Response) (*ShowApplicationAuthenticationResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ShowApplicationAuthenticationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ApplicationAuthentication
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorNotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseUpdateApplicationAuthenticationResponse parses an HTTP response from a UpdateApplicationAuthenticationWithResponse call
func ParseUpdateApplicationAuthenticationResponse(rsp *http.Response) (*UpdateApplicationAuthenticationResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UpdateApplicationAuthenticationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorNotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseListApplicationTypesResponse parses an HTTP response from a ListApplicationTypesWithResponse call
func ParseListApplicationTypesResponse(rsp *http.Response) (*ListApplicationTypesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ListApplicationTypesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ApplicationTypesCollection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseShowApplicationTypeResponse parses an HTTP response from a ShowApplicationTypeWithResponse call
func ParseShowApplicationTypeResponse(rsp *http.Response) (*ShowApplicationTypeResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ShowApplicationTypeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ApplicationType
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorNotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseListApplicationTypeSourcesResponse parses an HTTP response from a ListApplicationTypeSourcesWithResponse call
func ParseListApplicationTypeSourcesResponse(rsp *http.Response) (*ListApplicationTypeSourcesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ListApplicationTypeSourcesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SourcesCollection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorNotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseListApplicationsResponse parses an HTTP response from a ListApplicationsWithResponse call
func ParseListApplicationsResponse(rsp *http.Response) (*ListApplicationsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ListApplicationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ApplicationsCollection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateApplicationResponse parses an HTTP response from a CreateApplicationWithResponse call
func ParseCreateApplicationResponse(rsp *http.Response) (*CreateApplicationResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateApplicationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Application
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeleteApplicationResponse parses an HTTP response from a DeleteApplicationWithResponse call
func ParseDeleteApplicationResponse(rsp *http.Response) (*DeleteApplicationResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteApplicationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorNotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseShowApplicationResponse parses an HTTP response from a ShowApplicationWithResponse call
func ParseShowApplicationResponse(rsp *http.Response) (*ShowApplicationResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ShowApplicationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Application
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorNotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseUpdateApplicationResponse parses an HTTP response from a UpdateApplicationWithResponse call
func ParseUpdateApplicationResponse(rsp *http.Response) (*UpdateApplicationResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UpdateApplicationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorNotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseListApplicationAuthenticationsResponse parses an HTTP response from a ListApplicationAuthenticationsWithResponse call
func ParseListApplicationAuthenticationsResponse(rsp *http.Response) (*ListApplicationAuthenticationsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ListApplicationAuthenticationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AuthenticationsCollection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorNotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseListAuthenticationsResponse parses an HTTP response from a ListAuthenticationsWithResponse call
func ParseListAuthenticationsResponse(rsp *http.Response) (*ListAuthenticationsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ListAuthenticationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AuthenticationsCollection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateAuthenticationResponse parses an HTTP response from a CreateAuthenticationWithResponse call
func ParseCreateAuthenticationResponse(rsp *http.Response) (*CreateAuthenticationResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateAuthenticationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Authentication
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeleteAuthenticationResponse parses an HTTP response from a DeleteAuthenticationWithResponse call
func ParseDeleteAuthenticationResponse(rsp *http.Response) (*DeleteAuthenticationResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteAuthenticationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorNotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseShowAuthenticationResponse parses an HTTP response from a ShowAuthenticationWithResponse call
func ParseShowAuthenticationResponse(rsp *http.Response) (*ShowAuthenticationResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ShowAuthenticationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Authentication
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorNotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseUpdateAuthenticationResponse parses an HTTP response from a UpdateAuthenticationWithResponse call
func ParseUpdateAuthenticationResponse(rsp *http.Response) (*UpdateAuthenticationResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UpdateAuthenticationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorNotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseListEndpointsResponse parses an HTTP response from a ListEndpointsWithResponse call
func ParseListEndpointsResponse(rsp *http.Response) (*ListEndpointsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ListEndpointsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EndpointsCollection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateEndpointResponse parses an HTTP response from a CreateEndpointWithResponse call
func ParseCreateEndpointResponse(rsp *http.Response) (*CreateEndpointResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateEndpointResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Endpoint
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeleteEndpointResponse parses an HTTP response from a DeleteEndpointWithResponse call
func ParseDeleteEndpointResponse(rsp *http.Response) (*DeleteEndpointResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteEndpointResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorNotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseShowEndpointResponse parses an HTTP response from a ShowEndpointWithResponse call
func ParseShowEndpointResponse(rsp *http.Response) (*ShowEndpointResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ShowEndpointResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Endpoint
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorNotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseUpdateEndpointResponse parses an HTTP response from a UpdateEndpointWithResponse call
func ParseUpdateEndpointResponse(rsp *http.Response) (*UpdateEndpointResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UpdateEndpointResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorNotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseListEndpointAuthenticationsResponse parses an HTTP response from a ListEndpointAuthenticationsWithResponse call
func ParseListEndpointAuthenticationsResponse(rsp *http.Response) (*ListEndpointAuthenticationsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ListEndpointAuthenticationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AuthenticationsCollection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorNotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePostGraphQLResponse parses an HTTP response from a PostGraphQLWithResponse call
func ParsePostGraphQLResponse(rsp *http.Response) (*PostGraphQLResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostGraphQLResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GraphQLResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetDocumentationResponse parses an HTTP response from a GetDocumentationWithResponse call
func ParseGetDocumentationResponse(rsp *http.Response) (*GetDocumentationResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetDocumentationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListSourceTypesResponse parses an HTTP response from a ListSourceTypesWithResponse call
func ParseListSourceTypesResponse(rsp *http.Response) (*ListSourceTypesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ListSourceTypesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SourceTypesCollection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseShowSourceTypeResponse parses an HTTP response from a ShowSourceTypeWithResponse call
func ParseShowSourceTypeResponse(rsp *http.Response) (*ShowSourceTypeResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ShowSourceTypeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SourceType
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorNotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseListSourceTypeSourcesResponse parses an HTTP response from a ListSourceTypeSourcesWithResponse call
func ParseListSourceTypeSourcesResponse(rsp *http.Response) (*ListSourceTypeSourcesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ListSourceTypeSourcesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SourcesCollection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorNotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseListSourcesResponse parses an HTTP response from a ListSourcesWithResponse call
func ParseListSourcesResponse(rsp *http.Response) (*ListSourcesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ListSourcesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SourcesCollection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateSourceResponse parses an HTTP response from a CreateSourceWithResponse call
func ParseCreateSourceResponse(rsp *http.Response) (*CreateSourceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateSourceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Source
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeleteSourceResponse parses an HTTP response from a DeleteSourceWithResponse call
func ParseDeleteSourceResponse(rsp *http.Response) (*DeleteSourceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteSourceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorNotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseShowSourceResponse parses an HTTP response from a ShowSourceWithResponse call
func ParseShowSourceResponse(rsp *http.Response) (*ShowSourceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ShowSourceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Source
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorNotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseUpdateSourceResponse parses an HTTP response from a UpdateSourceWithResponse call
func ParseUpdateSourceResponse(rsp *http.Response) (*UpdateSourceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UpdateSourceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorNotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseListSourceApplicationTypesResponse parses an HTTP response from a ListSourceApplicationTypesWithResponse call
func ParseListSourceApplicationTypesResponse(rsp *http.Response) (*ListSourceApplicationTypesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ListSourceApplicationTypesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ApplicationTypesCollection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorNotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseListSourceApplicationsResponse parses an HTTP response from a ListSourceApplicationsWithResponse call
func ParseListSourceApplicationsResponse(rsp *http.Response) (*ListSourceApplicationsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ListSourceApplicationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ApplicationsCollection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorNotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseListSourceAuthenticationsResponse parses an HTTP response from a ListSourceAuthenticationsWithResponse call
func ParseListSourceAuthenticationsResponse(rsp *http.Response) (*ListSourceAuthenticationsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ListSourceAuthenticationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AuthenticationsCollection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorNotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseCheckAvailabilitySourceResponse parses an HTTP response from a CheckAvailabilitySourceWithResponse call
func ParseCheckAvailabilitySourceResponse(rsp *http.Response) (*CheckAvailabilitySourceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CheckAvailabilitySourceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorNotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseListSourceEndpointsResponse parses an HTTP response from a ListSourceEndpointsWithResponse call
func ParseListSourceEndpointsResponse(rsp *http.Response) (*ListSourceEndpointsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ListSourceEndpointsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EndpointsCollection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorNotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}
